
step_struct(){
    source $dir_root/.WORKSPACE/BANK/CFG/1_struct.cfg
}

step_source(){
    #source $dir_root/bashrc_additions.cfg
    echo silent sourcing 
    source $dir_production/PROJECT/PENDING/0_SOURCE/STEP1/breath.cfg 1>/tmp/out
    source $dir_production/PROJECT/PENDING/0_SOURCE/STEP2/breath.cfg 1>/tmp/out
    #1>/tmp/out
    echo presentation remind of  the big stones
    alias robot="robot_steps"
}
step_imagine(){
    bash -c $dir_root/IMAGINE/breath.cfg

}
step_export_funcs(){
    source $dir_root/IMAGINE/prepare.cfg

}
step_set_trap(){
    #depand: exported file: $file_server
    #depand: exported dir:  $dir_workspace
local file_path=$dir_workspace/BANK/CFG/2_trap.cfg
    local file=$($file_server $file_path)
if [ -f $file ];then
    local cmd="source $file"
    eval "$cmd"

    else
        echo "Error - file not exist: $file"
    fi
}
stepper(){
    clear
    local  str=$1
    echo "[step] $str"
    sleep 2
    eval "$str"
    res=$?
    if [ $res -ne 0 ];then
        echo "ERROR"
        break
    fi
}
step_explain_self(){
    echo think neat 
    echo
    type steps
    sleep 2
}
step_setup(){
bash -c     $dir_workspace/BANK/LISTS/SETUP/breath.cfg 1>/dev/null
}
step_test(){
    echo test

}
step_set_env(){
export     MODE_TRAP=false
export     MODE_TRAP_IN_PROXY=false
export     MODE_TRANSLATE=true

    }
steps(){
    while :;do

type step_set_env
stepper  step_set_env

        stepper step_struct
        stepper step_export_funcs
[     $MODE_TRAP = true ]  &&  { stepper step_set_trap ;}
        stepper step_source

         stepper step_setup 
        every 4 "stepper step_explain_self"
      every 4  "stepper step_imagine"
     echo   stepper step_test
        break
    done
}

steps

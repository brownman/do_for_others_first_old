set -o nounset
echo '[ PROXY.cfg ]'
#help:   log each command
#question:   how to quickly debug an error
#depend: $file_robot 
export MODE_ERR_EXIT=true
export MODE_CLEAR=true
export MODE_SLEEP=true
export MODE_XCOWSAY=false

str_to_arr(){
    #depend on: arr
    local str="$1"
    local delimeter=${2-'|'}
    IFS=$delimeter read -a arr <<< "$str"
    #result: arr
}

trace(){
echo "$@" >/dev/null
}
update_file(){
    echo 'UPDATE FILE'
    file="$1"
    shift
    args="$@"
    assert file_exist "$file"
    assert string_has_content "$args"
local    str_file=`basename $file`
    echo "[ $str_file ]" update with args:$args
    echo "$args" >> $file
}
xsel(){
    util=/usr/bin/xsel
    cmd="echo \"$@\" | $util --clipboard"
    robot "$cmd"
    eval "$cmd"
    #proxy  "$cmd"
}
ensure(){
    #echo -ne '[ENSURE]\t'
    echo "$@"
    local     args=( "$@" )
    let 'res=1'

    if [ "${#args[@]}" -eq 2 ];then

        local action="${args[0]}"
        local item="${args[1]}"
        local cmd=''
        case "$action" in
            dir_exist)
                [ ! -d "$item" ] && cmd="mkdir $item"
                ;;
            *)  robot 'ensure not defined yet:' "$action"
                ;;
        esac
    else
        robot "echo supply 2 args: $@"
    fi

    if [ -n "$cmd" ];then
        proxy "$cmd"
    fi

}



update_clipboard(){
    local cmd="$@"
    xsel "$cmd"
}
goto_bug(){
    local cmd="$1"
    local cmd1="$sh_wrapper $cmd" 
    local str_res=$( proxy "$cmd1" )
    local    cmd2="$sh_parser  $str_res"
    if [ $MODE_ERR_EXIT = true  ];then
    (   proxy "$cmd2" )
else
    eval "$cmd2"
fi
}

xcowsay(){
    if [ "$MODE_XCOWSAY" = true ];then
        /usr/games/xcowsay $1
    fi
}

sleep(){
    if [ "$MODE_SLEEP" = true ];then
        /bin/sleep $1
    fi
}
clear(){
    if [ "$MODE_CLEAR" = true ];then
        /usr/bin/clear
    fi
}
returning(){
    return  1
}
exiting(){
    exit 1
}
run_list(){
    clear
    echo -e '[running list at dir]\t'
    local path=$1
    echo "$path"
    local       str=`basename $path`

    assert dir_exist "$path"

    proxy figlet "$str"


    proxy xcowsay "list: $str"
    ##################################### lister
    pushd "$path" >/dev/null
    tree;
    local  cmd="( $sh_lister )"
    proxy "$cmd"
    popd >/dev/null
    ######################################################
proxy sleep 1
    echo '[PRESS CTRL+C TO EDIT]'
    proxy sleep 5
}
proxy(){
    #info: proxy each command:
    #desc: set a fallback to premature call to a function
    #example: update sleep() upon executer etc

    local args=( "$@" )
    local cmd="${args[@]}"
    robot "$cmd"
    eval "$cmd" 
}

robot(){
    #echo '[ROBOT]'
    #info: log a command OR just explain inline using the command: robot
    #warn: dont call the proxy/assert
    local args=( "$@" )
    echo '__________________________' >> $file_robot
    echo -e "caller]\t\t\t$0" >> $file_robot
    echo  -e "line_no]\t\t\t${BASH_LINENO[1]}" >> $file_robot
    echo "cmd: $@" >> $file_robot

    local max="${#args[@]}"

    local str_all="${args[@]}"
#    echo "$max | $str_all"


    if [ "$max" -gt 0 ];then
        local str="${args[0]}"
        if [ "$str" = save ];then
            if [ "$max" -gt 2 ];then
                filename="${args[1]}"
                local args="${args[2]}"

                ########### process
                local file=$dir_workspace_today/${filename}.txt
                update_file $file "$args"
            else
                echo reason_of_death 'invalid number of args'
            fi
#        else
#            echo "first arg is not: save"
            #echo -e "$str" >> $file_robot
        elif [ "$max" -gt 1 ];then
                filename="${args[1]}"
                local args="${args[2]}"

                ########### process
                local file=/tmp/${filename}.txt
                update_file $file "$args"
        else
            echo "[ROBOT] $@"

        fi

    fi





}
assert(){
#    echo -ne '[ASSERT]\t'
    trace robot assert "$@"
    local     args=( "$@" )
    let 'res=1'

    if [ "${#args[@]}" -eq 2 ];then

        local action="${args[0]}"
        local item="${args[1]}"

        case "$action" in
            dir_exist)
                [ -d "$item" ] && res=0
                ;;
            file_exist)    
                [ -f "$item" ] && res=0
                ;;
            file_has_content)  
                [ -s "$item" ] && res=0
                ;;
            string_has_content)  
                [ -n "$item" ] && res=0
                ;;

            *)  trace robot assert 'assertion not defined yet:' "$action"
                ;;
        esac
    else

        trace robot assert "echo supply 2 args: $@"

    fi

    #echo "[res] $res"
    if [ $res -eq 1 ];then
        local str=`echo "$action" | sed 's/_/ /g'`
        proxy flite -t "$str"
        echo 'returning/exiting'
        if [ $0 = "bash" ];then

            cmd="returning $res"
            proxy "$cmd"
        else



            cmd="exiting $res"
            proxy "$cmd"
        fi

    fi

}
#print
export -f trace

#log control
export -f proxy
export -f robot

#flow control
#if
export -f assert
export -f ensure
#break
export -f returning
export -f exiting

#list control
export -f run_list

#utils control
export -f clear
export -f sleep
export -f xcowsay
export -f xsel
#quick
export -f update_clipboard

export -f update_file
export -f goto_bug

export -f str_to_arr
set +o nounset

#!/bin/bash 
shopt -s expand_aliases
set -o nounset


echo '[ BREATH.CFG ]'
echo "[ $0 ]"
export TIMEOUT_STEP=7
if [ "$0" = bash ];then
export MODE_PRESENT=false
else
export MODE_PRESENT=true
fi

#sleep 3
clear
#set -x
#aliases alive:
#sleep(){
#
#print_func
#echo -n 'sleep:]]'
#print_func 2
#
#proxy sleep1 "$1"
#}
motivation(){

    print_func_n 31
    use random
    print_func
    file=$dir_root/motivation.txt
    line=$(random_line $file)
    echo "$line"
}

step(){
print_func_n
        echo -n "[ $counter_tests ]" 

    if [ $# -gt 0 ];then
        local title="$1"
        shift
        if [ $# -gt 0 ];then
            local args=( "$@" )
            local cmd="${args[@]}"
        fi
    fi
    if [ "$MODE_PRESENT" = false ];then
        echo "$title"
        eval "$cmd"       
    else
        clear

        echo "$title"
        echo "<CMD> [ $cmd ] "
        [ -f /tmp/out ] && rm /tmp/out
        [ -f /tmp/err ] && rm /tmp/err
        #    local msg=$(  
        eval  "$cmd"   2>/tmp/err 1>/tmp/out 
        res=$?
        echo -n "[RES:]" " [ $res ] "
        #    echo "[MSG] $msg"
        if [ $res -eq 0 ];then
            #flite -t 'no errors'
            let 'counter_tests+=1'
            #  [ -s /tmp/out ] &&     present_file "/tmp/out"
            #echo 'no errors'
            eval "$cmd"
        else
            #flite -t 'some errors'
            [ -s /tmp/out ] &&     present_file "/tmp/out"
            [ -s /tmp/err ] &&  present_file "/tmp/err" &&  parse_error_line "/tmp/err" 
            #        reason_of_death 'found error while running' "$file"
            if [ "$0" = bash ];then
                returning
            else
            exiting
            fi
        fi


        proxy sleep1 $TIMEOUT_STEP

    fi
}


print_func(){
    echo -e "\t\t${FUNCNAME[1]}()"
}
#GOAL:minimal loading before starting to use the Ofer interpreter
###################################################################################################
###################################################################################################
#PRIORITIES:
#1. sos is working
#2. know your priorities
#3. prompt as a travis presentor
#4. try to activate the ofer interpreter asap
###################################################################################################
###################################################################################################
minimal_export(){
    #info: load funcs for library.cfg

    print_func    
    export dir_library=$dir_root/works/library/0.0.2/src/rc
    export dir_breathing=$dir_library/cfg/breathing


    export file_logger=/tmp/logger.txt
    export file_clip=/tmp/clip.txt
    export file_skip=/tmp/skip.txt
    export file_results=/tmp/results.txt
    export file_aliases=/tmp/aliases.cfg
    echo -n  '' > $file_aliases
    echo -n  '' > $file_logger
    echo -n  '' > $file_skip

    export file_plan=$dir_root/plan.txt
    export file_level=$dir_root/level.txt

    let 'counter_tests=1'
}
minimal_funcs(){
    #file: define helper functions
    file_helper="$dir_breathing/helper.cfg"
    source $file_helper
    #aliasing_file $file_helper
}


load_library(){
    print_func
    file=$dir_library/library.cfg
    if [ -f "$file" ];then
        cmd="source $file" 
        step "load the library" "$cmd"
    else
        reason_of_death  'file not found' "$file"
    fi
}
test_library(){
    print_line
    print_func


    cmd="use cfg/public/proxy proxy.cfg"
    step "test the library" "$cmd"
}
exports(){

    ######################################################  dir:         bashranchor : use for loading files in this dir
    #path for self
    exporting dir_breath $dir_root/works/breath/0.0.1

    ####################################################### files:      intensive/immidiate : log/trace/skip/priorities
    #file_for: log 
    #file_for: dynamic aliases


    ###########################################################  files: configuration
    #file: self
    file_breath=$dir_breath/pre-list.cfg
    aliasing_file $file_breath 
    #file: define directory structure
    file_export="$dir_breathing/export.cfg"
    sourcing $file_export
    # source $file

}

remind(){
    print_func
    print_color_n 36 "efficiency level is:"
    str_level=`cat $file_level`
    echo "$str_level"

    ######################################################## list interpreter
    cmd1="print_rainbow_file $file_plan $str_level"
    cmd2="gvim $file_plan" 
    #step "where am I " "$cmd1"
    every 3  "echo $cmd1" "update_clipboard \"$cmd2\""
}
trigger_alias(){
    ##############################################  trigger: aliasing-all
    #ls -l $file_aliases
    source $file_aliases

}
report(){
    echo $counter_tests > $file_level
    figlet "WOW: $counter_tests"
}
lists(){
    print_func
    file_list=$dir_lists/list.sh
    aliasing_file $file_list
    ############################################## reminder: priorities
    #    ~/JAIL/TREE/works/LISTS/screens
    # cmd1="wrap_sh $file_list"
    cmd="echo $file_list"
    #every 5 "$cmd1" 'skip running file_list'
    breakpoint_line "$LINENO"
    step "load the lister" "$cmd"

}
run(){
    clear
    echo -ne '[RUN]\t'
    cmd="$1"

    echo "$cmd"
    eval "$cmd"
     type proxy 1>/dev/null 2>&1  && { proxy sleep1 5; }
}

steps(){
    print_func
    run minimal_export 
    run minimal_funcs 
    run load_library
    run test_library
    run exports

        run trigger_alias
           run report
echo     run lists
   echo    run remind

}


steps

set +o nounset

#breakpoint_line $LINENO

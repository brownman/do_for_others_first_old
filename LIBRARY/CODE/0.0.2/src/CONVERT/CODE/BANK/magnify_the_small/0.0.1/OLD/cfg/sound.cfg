#http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/
#http://dsl.org/cookbook/cookbook_5.html#SEC63 #pid
#http://www.thegeekstuff.com/2010/07/bash-string-manipulation/ 
#fs:
#find . -type f -print0 | xargs -0 du -h | sort -hr | head -20



echo01(){
local str="$1"
local file="$2"
    helper0 "$str" "$file"
}
echo02(){

    local str="$1"
    local silence="$2"
    if [ "$str" ];then
        eval "speller '$str'"
local cmd="$PLUGINS_DIR/translation.sh sentence \"$str\" $silence"
detach "$cmd"
            else
                notify_send1 'no input'
    fi


}

speller(){
    local str="$1"
    local res=`echo "$str" |  aspell -a | grep  ','`
    if [  "$res" = '' ];then
        trace "$str"
    else
        trace "$res"
        notify_send1 "$res"

        #echo "error"
        #breakpoint
        flite 'spelling error'
        trace "$str"
    fi

    #assert_equal_str "speller: $str" 
}


flite(){
    debug "flite() got: 1:$1 2:$2 3:$3"
    #local must="$2"
    #sleep1 1

    local desc="$1"



    local force=${2:-'false'}

            local cmd=/usr/bin/flite
    #[  "$must" = 'true' ] ||
        if  [ "$SILENCE" = 'false' ] || [ $force = true ] ;then



             echo "$desc" | $cmd 

            notify_send1 "say:" "$desc : $desc2"
            #gxmessage "flite: $desc" $GXMESSAGET
        else
            debug 'silence is on , force is false'
            #notify_send 'silence' "$1   :   $2"
        fi
    }

    #

    export -f echo01 
    export -f echo02 





    #   line_strip(){
    #        local line="$1"
    #        local file=$2
    #
    #        local num=$(echo "$line" | awk -F '|' '{print $1}')
    #        local res=$(echo "$line" | awk -F '|' '{print $2}')
    #
    #
    #
    #        for (( c=1; c<=$num; c++ ))
    #        do
    #            echo "$res" >> $file
    #        done
    #
    #        #echo "$num"
    #
    #    }


    export -f speller 
    export -f flite 

#!/bin/bash   
echo $0
sleep 3

clear
echo 'BREATH.CFG'
#set -x
#aliases alive:
shopt -s expand_aliases
set -o nounset
sleep(){
#sleep1 "$1"
echo 'sleep:]]'
print_func 2
}
sleep1(){
if [ "$0" != bash ];then
/bin/sleep $1
fi
}
flite1(){
#echo "flite ]] $@" 
if [ "$0" != bash ];then
flite "$@"
fi
}
motivation(){


    use random


    print_func
file=$dir_root/motivation.txt
line=$(random_line $file)
echo "$line"
 
}
step(){

local res
random_color
res=$?
echo
echo
print_line
echo -n '==='
    print_line
    print_func_n "\t\t\t\t$res"






    local args=( "$@" )
    local cmd="${args[@]}"
    echo "[ $counter_tests ]"
    echo "[COMMANDER] [ $cmd ] "


    sleep1 4
    [ -f /tmp/out ] && rm /tmp/out

    [ -f /tmp/err ] && rm /tmp/err
#    local msg=$(  
eval  "$cmd"   2>/tmp/err 
# 1>/tmp/out 

    res=$?
echo "[RES:]" "$res"
sleep1 4
#    echo "[MSG] $msg"
    if [ $res -eq 0 ];then
#flite -t 'no errors'

    let 'counter_tests+=1'
    [ -s /tmp/out ] &&     present_file "/tmp/out"
        #echo 'no errors'
        eval "$cmd"
    else
#flite -t 'some errors'
    [ -s /tmp/out ] &&     present_file "/tmp/out"
      [ -s /tmp/err ] &&  present_file "/tmp/err" &&  parse_error_line "/tmp/err" 
#        reason_of_death 'found error while running' "$file"
    fi
}


print_func(){
    echo -e "\t\t${FUNCNAME[1]}()"
}
#GOAL:minimal loading before starting to use the Ofer interpreter
###################################################################################################
###################################################################################################
#PRIORITIES:
#1. sos is working
#2. know your priorities
#3. prompt as a travis presentor
#4. try to activate the ofer interpreter asap
###################################################################################################
###################################################################################################
minimal_export(){
    print_func    
    export dir_library=$dir_root/works/library/0.0.2/src/rc
    export dir_breathing=$dir_library/cfg/breathing


    export file_logger=/tmp/logger.txt
    export file_skip=/tmp/skip.txt
    export file_results=/tmp/results.txt
    export file_aliases=/tmp/aliases.cfg
    echo -n  '' > $file_aliases
    echo -n  '' > $file_logger
    echo -n  '' > $file_skip
    export file_plan=$dir_root/plan.txt

    let 'counter_tests=0'
}
minimal_funcs(){
    #file: define helper functions
    file_helper="$dir_breathing/helper.cfg"
    source $file_helper
    #aliasing_file $file_helper
}


load_library(){
    print_func
    file=$dir_library/library.cfg
    if [ -f "$file" ];then
        cmd="source $file" 
        step "$cmd"
    else
        reason_of_death  'file not found' "$file"
    fi
}
test_library(){
print_line
    print_func

breakpoint_line $LINENO
    cmd="use cfg/public/proxy proxy.cfg"
    step "$cmd"
}
mini(){

    ######################################################  dir:         bashranchor : use for loading files in this dir
    #path for self
    export dir_breath=$dir_root/works/breath/0.0.1

    ####################################################### files:      intensive/immidiate : log/trace/skip/priorities
    #file_for: log 
    #file_for: dynamic aliases


    ###########################################################  files: configuration
    #file: self
    file_breath=$dir_breath/breath.cfg
    aliasing_file $file_breath 
    #file: define directory structure
    file_export="$dir_breathing/export.cfg"
    sourcing $file_export
    # source $file

    file_list=$dir_lists/list.sh
    aliasing_file $file_list
    ############################################## reminder: priorities
    print_color_n 36 "efficiency level is:"
    efficiency_level=`cat $dir_root/level.txt`
    echo "$efficiency_level"



}

remind(){
    ######################################################## list interpreter
    cmd1="print_rainbow_file $file_plan $efficiency_level"
    cmd2="gvim $file_plan" 
    every 8  "$cmd1" "echo $cmd2"
    #cmd1=" wrap_sh $file_list"
    #every 5 "$cmd1" 'skip running file_list'
}
trigger_alias(){
    ##############################################  trigger: aliasing-all
    ls -l $file_aliases
    source $file_aliases

}
report(){

figlet "WOW: $counter_tests"
}
steps(){
    print_func
    minimal_export
    minimal_funcs

#print_shlvl

    load_library

#    motivation
    test_library
    trigger_alias
 report
}


steps

set +o nounset

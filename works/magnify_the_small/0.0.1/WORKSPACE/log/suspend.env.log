dir_library=/home/dao04/JAIL/TREE/works/library/0.0.2
GXMESSAGE=-sticky -ontop
LESS_TERMCAP_mb=[01;31m
SSH_AGENT_PID=3846
file_aliases=/home/dao04/JAIL/TREE/works/breath/0.0.1/file_aliases_dynamic.cfg
LESS_TERMCAP_md=[01;37m
LESS_TERMCAP_me=[0m
GPG_AGENT_INFO=/home/dao04/.cache/keyring-JfDMYf/gpg:0:1
GLADE_PIXMAP_PATH=:
single_sh=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/singles/single.sh
TERM=xterm
SHELL=/bin/bash
XDG_MENU_PREFIX=xfce-
XDG_SESSION_COOKIE=747cb34ec7e2320b881a0f4d52d91185-1394967183.11386-781552211
dir_workspace=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/WORKSPACE
TIMEOUT_ALIVE=180
dir_singles_cli=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/singles_cli
WINDOWID=58726727
LESS_TERMCAP_ue=[0m
dir_root=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1
NAME=ofer
USER=dao04
file_logger=/home/dao04/JAIL/TREE/works/breath/0.0.1/logger.txt
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:
dir_indicator=/tmp/CRONING/INDICATORS
XDG_SESSION_PATH=/org/freedesktop/DisplayManager/Session0
GLADE_MODULE_PATH=:
SOUND=true
XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0
SSH_AUTH_SOCK=/home/dao04/.cache/keyring-JfDMYf/ssh
SESSION_MANAGER=local/localhost:@/tmp/.ICE-unix/3866,unix/localhost:/tmp/.ICE-unix/3866
TIMEOUT_SUSPEND=60
dir_vendor=/home/dao04/JAIL/TREE/vendor/0.0.1
ln_desktop=/home/dao04/Desktop/ROUNDS
LESS_TERMCAP_us=[01;32m
XDG_CONFIG_DIRS=/etc/xdg
GMAIL_USER_BASHRC=advance.linux2
PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/home/dao04/JAIL/TREE/works/LISTS/bin:/home/dao04/JAIL/TREE/works/LISTS/bin:/home/dao04/JAIL/TREE/works/LISTS/bin
DESKTOP_SESSION=lightdm-xsession
dir_breath=/home/dao04/JAIL/TREE/works/breath
translate_sh=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/singles/translation/translation.sh
file_skip=/home/dao04/JAIL/TREE/works/breath/0.0.1/skip.txt
PWD=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/bin/0_sos
BASH_GUI=true
GNOME_KEYRING_PID=3798
LANG=en_US.UTF-8
dir_singles=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/singles
dir_magnify=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1
GDMSESSION=lightdm-xsession
file_plan=/home/dao04/JAIL/TREE/works/breath/0.0.1/plan.txt
SHLVL=7
HOME=/home/dao04
dir_log=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/.LOG
TIMEOUT_FILE_EDITING=5
GMAIL_USER_PASSWORD=advance.linux
LOGNAME=dao04
LESS_TERMCAP_so=[01;44;33m
XDG_DATA_DIRS=/usr/local/share:/usr/share
DBUS_SESSION_BUS_ADDRESS=unix:abstract=/tmp/dbus-OEnszY9kwu,guid=6b12538fdde41bf7a507ca4953258290
suspend_sh=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/singles/suspend/suspend.sh
dir_works=/home/dao04/JAIL/TREE/works
single_cli_sh=/home/dao04/JAIL/TREE/works/magnify_the_small/0.0.1/singles_cli/single_cli.sh
GUI=true
DISPLAY=:0.0
GLADE_CATALOG_PATH=:
LIBGLADE_MODULE_PATH=:
LESS_TERMCAP_se=[0m
COLORTERM=Terminal
XAUTHORITY=/home/dao04/.Xauthority
remove_trailing=() {  trace 'remove_trailing';
 local res=$(echo "$1" | sed -e 's/^ *//g' -e 's/ *$//g');
 echo "$res"
}
load_txt=() {  file="$1";
 if [ -f "$file" ]; then
 str0=`basename $file`;
 str=`higher "$str0"`;
 aliasing_file $file;
 print_file "$file" 1;
 else
 reason_of_death 'no such file' "$file";
 fi
}
sourcing=() {  file="$1";
 assert_file_exist "$file";
 echo "$file";
 source $file;
 aliasing_file $file
}
print_file=() {  file="$1";
 offset=${2:-0};
 if [ -f "$file" ]; then
 echo;
 filename=`basename $file`;
 str=`higher $filename`;
 echo -ne "[ $str ]\t";
 if [ $offset -eq 0 ]; then
 echo;
 print_line;
 cat $file;
 echo;
 else
 if [ $offset -gt 0 ]; then
 cat $file | head -"${offset}";
 else
 cat $file | tail -"${offset}";
 fi;
 fi;
 else
 reason_of_death 'not a file' "$file";
 fi
}
breakpoint=() {  flite -t 'error';
 notify-send "$0";
 gxmessage -title 'local Breakpoint' "$0"
}
skip=() {  echo "$@" >> $file_skip
}
print_color_n=() {  echo -en "\x1B[01;$1m[*]\x1B[0m $2 "
}
every=() {  print_funcname;
 local num=${1:-5};
 local cmd_do="$2";
 local cmd_else=${3:-''};
 random $num;
 local res=$?;
 if [ $res -eq 0 ]; then
 eval "$cmd_do";
 else
 eval "$cmd_else";
 fi
}
remind_test=() {  print_funcname;
 echo 'run test.sh'
}
str_to_arr=() {  local str="$1";
 local delimeter=${2-'.'};
 IFS=$delimeter read -a arr <<< "$str"
}
trace=() {  echo ',,';
 f2=${FUNCNAME[2]};
 f1=${FUNCNAME[1]};
 msg="$f1,$f2: $@";
 echo "$msg" >> $file_logger
}
breakpoint_line=() {  line=${1:-''};
 print_line;
 print_line;
 print_color 33 "[BREAKPOINT ON LINE x HAS BEEN SET]";
 cmd="vi $0 +$line";
 update_clipboard "$cmd";
 print_line;
 print_line
}
traverse_dir=() {  dir=$1;
 if [ -d "$dir" ]; then
 items=`ls  "$dir"`;
 for item in $items;
 do
 notify-send "$item";
 done;
 else
 reason_of_death 'invalid dir' "$dir";
 fi
}
print_func=() {  echo "---> ${FUNCNAME[1]}()"
}
random=() {  local num=$1;
 let "r = $RANDOM % $num";
 return $r
}
assert_dir_exist=() {  dir="$1";
 if [ -d "$dir" ]; then
 trace 'dir exist' "$dir";
 else
 reason_of_death 'directory not exist' "$dir";
 fi
}
assert_file_exist=() {  file="$1";
 if [ -f "$file" ]; then
 trace 'file exist' "$file";
 else
 reason_of_death 'file not exist' "$file";
 fi
}
print_funcname=() {  name="${FUNCNAME[1]}";
 str=`higher "$name"`;
 color=${1:-32};
 print_color_n $color "[ $str ]\t"
}
print_stack=() {  set +o nounset;
 local num=${1:-2};
 max="${#FUNCNAME[@]}";
 if [ $num -le $max ]; then
 local caller="${FUNCNAME[$num]}";
 local lineno="${BASH_LINENO[$num-1]}";
 local filename="${BASH_SOURCE[$num]}";
 local callers="$lineno:$0:$filename";
 cmd="vi $0 +$lineno";
 update_clipboard "$cmd";
 echo "$callers";
 else
 reason_of_death "stack length is: $max";
 fi
}
scrap_smart_quote=() {  echo;
 print_funcname
}
assert_cmd_is_valid=() {  cmd="$1";
 `type "$cmd"` > /dev/null;
 res=$?;
 if [ $res -eq 0 ]; then
 trace 'command is valid' "$cmd";
 else
 reason_of_death 'invalid command' "$cmd";
 fi
}
print_color=() {  echo -e "\x1B[01;$1m[*]\x1B[0m $2 "
}
print_line=() {  hr='----------------------------------------------------------------';
 printf '%s' "${hr:0:${COLUMNS:-$(tput cols)}}";
 echo
}
exiting=() {  print_color_n 31 '__';
 exit 1
}
returning=() {  return
}
exporting=() {  print_funcname 35;
 export_name=$1;
 dir=$2;
 echo "$export_name";
 assert_dir_exist "$dir";
 cmd="export $export_name=$dir";
 eval "$cmd";
 aliasing_dir "$export_name"
}
higher=() {  echo ${@^^}
}
assert_file_not_empty=() {  echo;
 echo '[ ASSERT ]  ';
 file="$1";
 if [ -s "$file" ]; then
 echo 'file has content: ' "$file";
 else
 reason_of_death 'file is empty' "$file";
 fi
}
reason_of_death=() {  why="$1";
 who="$2";
 echo "why: $why";
 echo "who: $who";
 gxmessage "why:$why|  who:$who" -title 'reason of death';
 exit 1
}
parse_error_line=() {  print_funcname;
 line="$1";
 arr=();
 `str_to_arr "$line" \:`;
 max="${#arr[@]}";
 if [ "$max" -gt 1 ]; then
 echo ok;
 echo "file:" "${arr[0]}";
 echo "line:" "${arr[1]}";
 echo "msg:" "${arr[2]}";
 else
 reason_of_death 'incorrect parsing of line' "$line";
 fi
}
update_clipboard=() {  cmd="$1";
 print_color 32 '[CLIPBOARD] ';
 echo "$cmd";
 echo "$cmd" | /usr/bin/xsel --clipboard
}
_=/usr/bin/env

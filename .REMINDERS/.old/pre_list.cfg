#!/bin/bash
#info: pre-list
#desc: load minimal files prior to start using the tool: lister
#plan: use lister to load a list which load everything else: quick_commands, etc

echo if you dont understand something - it is awesome for adding a wierd test!
exec 2>/tmp/err
if [ "$0" != bash ];then
set -o nounset
echo 

fi

dir_self=`dirname $BASH_SOURCE`
echo "[pre-list]"
alias proxy="proxy $(caller) ${FUNCNAME[0]}"

trap_err(){
    echo trap
    local str=''
#    echo "0: ${FUNCNAME[0]}"
#    echo "1: ${FUNCNAME[1]}"
#    echo "2: ${FUNCNAME[2]}"
    echo -n '[trap_err] [caller]'
   echo `caller` 
echo 
   
 #  sleep 2

            echo -n "[trap_err] [func previous]"
            echo "${FUNCNAME[1]}"
        if [ "${FUNCNAME[1]}" = proxy ];then

            str=`cat /tmp/proxy | tail  -1`
        else
            str=`caller`
                fi
                echo -n '[TRAP] '
                echo "$str"
#local line=$( echo $str | cut -d'' -f1 )
#local file=$( echo $str | cut -d'' -f3 )
#local cmd="vi +${line} $file"
                local cmd="vi +${str}"
                echo "$cmd"
                echo "$cmd" | xsel --clipboard
                sleep 2
                echo '---'
    echo -n '/tmp/error: '
    cat /tmp/err

                break
}


proxy () 
{
    local str_caller="$( caller )"
#    echo -n "proxy caller:"
#    echo ` caller`
    local args=($@);
    local caller_is="${args[0]}"
    local runner=${args[1]};
    echo "caller is: $caller_is"
    type $runner >/dev/null  || { 
        echo "[ERROR] command not found: $runner"
    };
    local cmd="${args[@]}";
    local max="${#args[@]}";

        echo "vi +$str_caller # $cmd" >> /tmp/proxy;
    eval "$cmd"
}

steps(){
while :;do
trap trap_err ERR
           local file=''
           local cmd=''

           local file="$dir_self/traps.cfg"
           proxy source  $file
           cmd="cat $file | sed 's/trap//g' "
           proxy "$cmd"

           local file="$dir_self/set.cfg"
           proxy source  $file
           cmd="cat $file | sed 's/export//g' | sed 's/=//g'"
           proxy "$cmd"

           file=$dir_self/funcs.cfg
           proxy source $file

           cmd="cat $file | grep '(){' | sed 's/(){//g'"
           proxy "$cmd"

           file=$dir_self/quick.cfg
           proxy source $file
           cmd="cat $file | grep info"
           proxy "$cmd"
           break
           done

break
}
steps


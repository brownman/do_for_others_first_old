#http://jamesslocum.com/post/61904545275
#http://askubuntu.com/questions/244672/how-can-i-easily-create-a-gui-dialog-with-a-bash-script
#http://linux.byexamples.com/archives/265/a-complete-zenity-dialog-examples-2/

notify_send3(){
#local cmd="breakpoint"
#breakpoint
#optional "$cmd" 'breakpoint' error
#xcowsay -t 20 "$1"
local src="$1"
local util=/usr/games/xcowsay
$( $util -t 20 "$1" )
}


#show_args0(){
#
#secret 2
#    local res=0
#    local caller="${FUNCNAME[1]}"
#    local lineno="${BASH_LINENO[0]}"
#    local filename="${BASH_SOURCE[1]}"
#    #$0:$filename:
#    local callers="$caller():$lineno"
#    yad --timeout 20 --title "arguments:" --form --separator='|' --text "$callers" --field=Box1 "$1" --field=Box2  "$2"  --field=Box3 "$3" \
    #        --button="gtk-close:0" --button="gtk-ok:1" 
#    #trace "$result"
#
#    res=$?
#    if [ $res -eq 0 ];then
#        exiting
#    else
#        #flite 'continue'
#        trace 'go on'
#    fi
#    #echo "$result"
#}

ex1(){

    action=$(yad --width 300 --entry --title "System Logout" \
        --image=gnome-shutdown \
        --button="Switch User:2" \
        --button="gtk-ok:0" --button="gtk-close:1" \
        --text "Choose action:" \
        --entry-text \
        "Power Off" "Reboot" "Suspend" "Logout")
    ret=$?
    assert_equal_str "$res | $action"
}

ex2(){
    LOGFILE=${1:-/var/log/messages}

    PARSER='{font=""; color="#FFFFFF"}; \
        /kernel/ {font="italic"}; \
        /warn/ {color="#FFF4B8"}; \
        /error/ {color="#FFD0D8"}; \
        OFS="\n" {print $1 " " $2, $3, $4, substr($5,0,index($5,":")-1), \
        substr($0,index($0,$6)), font, color; fflush()}'

    tail -f $LOGFILE | awk "$PARSER" | \
        yad --title="Log viewer" --window-icon=logviewer \
        --button=gtk-close --geometry 600x350 \
        --list --text="Content of $LOGFILE" \
        --column Date --column Time --column Host \
        --column Tag --column Message:TIP \
        --column @font@ --column @back@

    exit $?
}
#export number_of_files=$(find folder_to_backup -type f | wc -l) && ( find folder_to_backup -print0 -type f -exec sh -c "7z a -t7z /path/to/Backup.7z {} -mx9 -bd | grep Compressing" \; | awk -W interactive -v x="$number_of_lines" '{printf "%d\n", (NR*100/x)}' ) | zenity --progress --percentage=0 --auto-close
notify_send(){
trace "$@"
}

notify_send1(){

local util=/usr/bin/notify-send
local str1=${1:-'.'}
local str2=${2:-'_'}

cmd="$util \"$str1\" \"$str2\""

local res1=$( eval "$cmd" )
local res2=$?
trace "1:$res1 2:$res2"
trace "notify-send called from: ${FUNCNAME[1]}"
#trace "notify_send called from: ${FUNCNAME[2]}"
}




messageYN1() {
    #notify_send $0
    trace "messageYN got: 1: $1 2: $2 3:$3"
    local str=${1:-'continue ?'}   # Defaults to /tmp dir.
    local title=${2:-'y/n question'}   # Defaults to /tmp dir.
    local iconic="$3"
    local delay="$4"
    local result=$NO
    local buttons="NO:$NO,YES!:$YES" #,screenshot:2"

    if [ "$delay" = '' ];then
        $( gxmessage -buttons "$buttons" -title "$title" "$str"  $GXMESSAGET "$iconic"  )
    else
        $( gxmessage -buttons "$buttons" -title "$title" "$str"  "$iconic" -timeout $delay )
    fi
    result=$?
    #assert_equal_str "$result" "result"
    #        if [ $result -eq 1 ];then
    #            notify_send1 'screenshot'
    #        fi
    #notify_send 'messageYN1' "$result"
    #echo "$result"
    return $result
}


messageFYN1() {
    #notify_send $0
    notify_send1 'message fyn1' 
    trace "messageYN got: 1: $1 2: $2 3:$3"
    local file=${1:-/tmp/1.txt}   # Defaults to /tmp dir.
    local title=${2:-'y/n question'}   # Defaults to /tmp dir.
    local iconic="$3"
    local delay="$4"
    local result=$NO
    local buttons="NO:$NO,YES!:$YES" #,screenshot:2"

    if [ "$delay" = '' ];then
        $( gxmessage -buttons "$buttons" -title "$title" -file "$file"  $GXMESSAGET "$iconic"  )
    else
        $( gxmessage -buttons "$buttons" -title "$title" -file "$file"  "$iconic" -timeout $delay )
    fi
    result=$?
    #assert_equal_str "$result" "result"
    #        if [ $result -eq 1 ];then
    #            notify_send1 'screenshot'
    #        fi
    #notify_send 'messageYN1' "$result"
    #echo "$result"
    return $result
}




#http://code.google.com/p/linuxsleuthing//browse/nautilus-scripts/

zenity2(){


    local name="$2"
    local type="$1"
    local file=$(get_filename $type $name )
    local res=$(zenity1 $file)
    echo "$res"
}
zenity1(){
    #find . -name '*.txt' 
    local file="$1"
    local title=${2:-"title"}
    local text=${3:-"text"}
    #${3:-'text0'}
    #local editable="$4"
    notify_send "$editable"
    #local res=$(
    local res=$(cat $file | zenity --list --title "$file" --text "$text" --column "Files" --editable --timeout $TIMEOUT_ZENITY)



    local notify1=$(cat $file | head -1)
    notify_send1 "$notify1"

    echo "$res"

}
#zenity11(){
#    #find . -name '*.txt' 
#    local file="$1"
#    local title=${2:-"title"}
#    local text=${3:-"text"}
#    #${3:-'text0'}
#    #local editable="$4"
#    notify_send "$editable"
#    #local res=$(
#    res=$(cat $file | zenity --list --title "$file" --text "$text" --column "Files" --editable --timeout $TIMEOUT_ZENITY)
#
#
#
#    #local notify1=$(cat $file | head -1)
#    #notify_send1 "$notify1"
#
#    echo "$res"
#
#}

#show_vars(){
#    trace 'show vars'
#    trace "DEBUG: $DEBUG"
#    trace "VERBOSE: $VERBOSE"
#}
progress_bar(){
    local goal="$1"
    local goal1="$1"
    local delay=20 #"$2"
    (


    echo "10" ; sleep $delay

    echo "# $goal" ; sleep 1
    echo "20" ; sleep $delay
    #echo "# increase motivation" ; sleep 1

    echo "# $goal" ; sleep 1
    echo "50" ; sleep $delay
    #echo "#learn new words" ; sleep 1

    echo "# $goal" ; sleep 1
    echo "75" ; sleep $delay

    echo "# $goal" ; sleep 1
    #echo "# finish cycle" ; sleep 1
    echo "100" ; sleep $delay
    ) |
    zenity --timeout 120 --progress         \
        --title="time-frame:" \
        --text="restart goal" \
        --percentage=0

    if [ "$?" = -1 ] ; then
        zenity --error \
            --text="Update canceled."
    fi
}

tracex(){


    #    local btn_str="${3:-ok}"
    local title="tracex"
    local msg="$0: $1 : $2 :  $3"

    gxmessage $GXMESSAGET "$msg" -title "$title" 
    #to_continue  

    #-buttons "$btn_str":0 $ICONIC

    #flite "$1"
    breakpoint
}
assert_equal_str(){
    local secret=$(secret 3)
    sleep1 2
    local from="$1"
    local to="${2:-'???'}"
    #local res=$(echo "$from" | grep -o "$to")
    if [ "$from" = "$to" ];then
        notify_send1 'continue'
        flite "success"
    else
        flite "expect $3"
        #local msg="${from}?=${to}"
        #msg='not equal'

        gxmessage $GXMESSAGET  -title "$secret" "*$to*$from*"

    fi
    breakpoint
}
assert_not_equal_str(){
    sleep1 2
    local from="$1"
    local to="${2:-'???'}"
    local res=$(echo "$from" | grep -o "$to")
    if [ "$res" != '' ];then
        flite "expect $3"
        gxmessage $GXMESSAGET "res:$res|-$from-?=-$to-" -title "expect str1: $to" 
    else
        notify_send1 'continue'
        flite "success"
    fi
    breakpoint
}

assert_equal_cmd(){
    COMMANDER=true

    local from="$1"
    local to=${2:-'???'}

    flite 'expect command'
    local tmp=$(commander "$from")


    local res=$(echo "$tmp" | grep -o "$to")


    if [ "$res" = '' ];then

        gxmessage $GXMESSAGET $GXMESSAGE1 "$to  ?==? $tmp" -title "expect cmd: $to" 
        breakpoint
    else
        notify_send 'continue'
    fi
}

assert_equal_file(){
    flite 'expect file'
    local file="$1"
    local from=$(echo "-$(cat $file)-")
    local to="${2:-'???'}"


    local res=$(echo "$from" | grep -o "$to")
    if [ "$res" = '' ];then

        gxmessage $GXMESSAGET $GXMESSAGE1 "_$res|$from|$to_" -title "expect file: $to" 
        breakpoint 
    else
        notify_send 'continue'
    fi

}

#    sleep3(){
#
#        ffmpeg -i %f -vn -ar 44100 -ac 2 -ab 128 -f mp3 %f.mp3 | yad --progress --percentage=40 --progress-text="Please wait ... file being processed" --title="Audio Extraction" --auto-close --auto-kill
#
#    }
export -f assert_equal_str
export -f assert_not_equal_str
export -f assert_equal_cmd
export -f assert_equal_file
export -f tracex
export -f ex1 
export -f progress_bar
export -f notify_send 
export -f notify_send1 
export -f notify_send3 
export -f notify_send4 
export -f zenity1 
export -f zenity2        
export -f messageYN1
export -f messageFYN1
export -f sleep2
export -f zenity_editable 
export -f check_boxes 
export -f level 
export -f show_entry 
##

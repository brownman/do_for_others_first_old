#!/bin/bash
#set filetype=sh
clear
remind(){
    local num=$1
    shift
local cmd1="present pv $@"
local cmd="every $num \"$cmd1\""
proxy "$cmd"
    }

    export -f remind
greping(){
   local str="$1" 
cat /tmp/sourcing | grep "$str" --color=auto
    }
    export -f greping

trap_err(){
    echo "[TRAP] err (from .bashrc)"
    #info: if the executor hasn't been sourcingd by another process
    if [ "$BASH_SOURCE" != bash ];then
        notify-send "trap err"
        local str_caller="gvim +$( caller )"
        echo $tr_caller
        cat /tmp/err
        sleep 3
        if [ -f /tmp/err ];then
            local str=$( gxmessage -entrytext "$cmd" -title '/tmp/err' -file /tmp/err )
        else
            local str=$( gxmessage -entrytext "$cmd" -title '/tmp/err empty' "found an error" )
        fi
        local cmd="$str"
        #                        ( sleep 6; eval "$cmd" )&
        eval "$cmd"

        #-file /tmp/err
        #        return 0
    fi
}



install_trap(){

    export -f trap_err
    echo trap trap_err ERR
    trap trap_err ERR
}
sourcing(){
    echo -n '[sourcing] '
    local     file="$1"
    echo "$file"

    local cmd="source $file"
    cat $file >> /tmp/sourcing
    sleep 1
    eval "$cmd"
}

spellcheck(){
    #supply a file and paste it to the website
    file=$1
    cat $file | xsel --clipboard

    flite -t 'updating clipboard'
    xdg-open http://www.shellcheck.net &
}
export -f spellcheck

alias bashrcE="vi $file"
export dir_root=~/JAIL/TREE
alias cdroot="cd $dir_root"
alias bashrcA="vi ~/bashrc_additions.cfg"


#alias quicks="sourcing ~/JAIL/TREE/LAB/1_key_1_cron/SNIPPET/quick.cfg"
#alias struct="sourcing $dir_root/breath.cfg"
selfish_script(){
    local file="$1"
    local tag="#${2}: "
    local str_res=$( cat $file | grep -A 4 "$tag" | sed "s/$tag//g" )
    echo "$str_res"
}

selfish_func(){
    echo
}
file_present(){
    local file="$1"
    echo '...'
    echo `basename $file`
    echo '__'
    while read line;do
        proxy "present pv '$line'"
        sleep 1
    done
    echo '---'
}
update_file(){
    local file="$1"
    local str="$2"
    [ ! -f "$file" ] && { proxy echo creating file;touch $file; }
    if    [  -n "$str" ];then
        echo "$str" >> $file
    else
        proxy echo error - string is empty: $str
    fi
}


update_workspace(){
    local filename="$1"
    local dir_workspace=$dir_root/.WORKSPACE
    [  !   -d $dir_workspace ] && { mkdir $dir_workspace; }
    if [ -d "$dir_workspace" ];then
        local file=$dir_workspace/$filename.txt
        local str="$2"
        update_file $file $str
    else
        proxy echo error - dir not found: $dir_workspace
    fi
}

export -f file_present
alias present_file='file_present'
export -f selfish_script
export -f update_file
export -f update_workspace
#file="~/JAIL/TREE/CODE/BANK/BASHRC/BANK/funcs.cfg"
#sourcing $file

alias quick_logs="echo /tmp/proxy;cat -n /tmp/proxy"

alias quick_callers="echo /tmp/callers;cat -n /tmp/callers"

alias logs="echo /tmp/proxy;cat -n /tmp/proxy"


#set +o nounset
#alias udebug="set +x"
#alias debug="set -x"
#sourcing ~/bashrc.additions
#alias cdmagnify="cd ~/JAIL/TREE/works/magnify_the_small/0.0.1"
#export dir_root=/home/$LOGNAME/JAIL/
#echo "$cmd"
#eval "$cmd"
#echo "sourcing $dir_root/CLI_STEPS/breath.cfg   --> run it after list/coverage/wrapper are tested"
#export PATH=$PATH:~/JAIL/TREE/LANG/bin
alias quick_git_diff="find . -mmin -6"
alias quick_rename_files="find . -type f -iname “*.mp3″ -exec rename “s/ /_/g” {} \;"
alias bashrc='vi ~/.bashrc'

alias grep1="grep --exclude-dir=.git"

alias save_path="pwd >> $dir_root/list.txt;cat $dir_root/list.txt"


#DIR="$( cd "$( dirname "${BASH_sourcing[0]}" )" && pwd )"


cd_to_me () 
{
    # dir_self=$(dirname $BASH_sourcing)
    #sourcing $file_cd_to_me
    #export file_cd_to_me=cd_to_me.cfg
    #cd_to_me

    local file="${BASH_sourcing[0]}";
    local dir_self="$( cd "$( dirname $file )" && pwd )";
    local name=$( pwd | rev | cut -d'/' -f1 | rev );
    local cmd="alias cd_${name}=\"cd $dir_self\"";
    echo "[file] $file";
    echo "[dir_self] $dir_self";
    echo "[name] $name";
    echo "[cmd] $cmd";
    eval "$cmd"
}

#alias | grep 'cd_\|layout' 
alias rm="echo removing files to dir: /tmp;mv"
alias testing="cd ~/JAIL/TREE/ENTRY_POINTS/TRAP"
ascii_art(){
    wget -qO - http://www.asciiartfarts.com/random.cgi | sed -n '/<pre>/,/<\/pre>/p' | sed -n '/<table*/,/<\/table>/p' | sed '1d' | sed '$d' | recode html..ascii
    fortune | cowsay
}
file_delete(){
    local file=$1
    if [ -f $file ];then
local     cmd="/bin/rm $file"
    echo "$cmd"
    eval "$cmd"
        fi
    }
    step0(){
    #info: delete temp files
    file_delete /tmp/proxy
    file_delete /tmp/err
    file_delete /tmp/sourcing
    }
    step1(){
  #info: upgrade shell features 
    sourcing $dir_links0/save.cfg
    }
step2(){
    local  dir_links=$dir_root/.LINKS
    
    sourcing $dir_links/proxy.cfg
    sourcing $dir_links/env.cfg
    sourcing $dir_links/funcs.cfg
    sourcing $dir_links/quick.cfg
    every 5 "ascii_art" 
    local         cmd="~/JAIL/TREE/breath.cfg"
    update_clipboard "$cmd"

}
step3(){
     local msg="god said - who ever do for others first - will succeed"
(flite -t "$msg" &)
   
local cmd="let us try to avoid loosing valuable time - do only the steps that works for you !"
remind 5 "$cmd"
local cmd="insall_trap - may result in loosing your time"
remind 5  "$cmd"

    }


steps(){


first_steps

sleep 2
second_steps

echo "running: first_steps"
}
#steps


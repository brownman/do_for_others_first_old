proxy1(){
    local args=( $@ )
    local cmd="${args[@]}"
    echo "$cmd" >> $dir_txt/proxy.txt

    (    eval "$cmd" 2>/tmp/err 1>/tmp/out )
}


traps(){
    print_func
    echo traps
    #url:    http://stackoverflow.com/questions/64786/error-handling-in-bash
    local str="$1"
    echo "[ trap ] $str > $_ "
    case  "$str" in
        err)

            local cmd="gxmessage -file /tmp/err -title '[ trap ] err' -timeout $timeout"
            eval "$cmd"
            ;;
        *)
            echo 
            ;;
    esac

    say fail
}

    if [ ! -s $file  ];then
        proxy xcowsay "create new file $file"
        gvim $file
    fi

          caller_is)

                #    proxy gxmessage "$( caller )" -title 'caller_is'
                #notify-send 'call sleep' "$(caller)"
local funcname="${FUNCNAME[2]}"
#        regex='^([a-z]{1,}) ([0-9]{1,})$'

#local        regex="^proxy\$"
#([0-9])\$"
#  regex="^${error_file}\$|^${error_file}\s+|\s+${error_file}\s+|\s+   ${error_file}\$"
#              if [[ "$_backtrace" =~ $regex ]]

        
            #if [[ $error_lineno =~ $regex ]]

            #xcowsay "funcname: $funcname"

                if [ "$item" = "${funcname}" ] || [ "${item}1" = "$funcname" ];then

#                 { echo "OK caller is proxy" ;res=0; }
echo -n ''
res=0
                    else

                 { echo "ERROR - caller is not $item" ;} 
                        fi


                ;;


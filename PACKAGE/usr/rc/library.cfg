#!/bin/bash -e
echo 'example: use bashrc.history.save'

#echo 'set -o nounset'
#set -o nounset
correction(){
    echo -e "\t\t\tCORRECTION()"  
    path=${1:-''}
    item=${2:-''}
    cmd="grep $item -r $path --color=auto --exclude-dir=.old"
    echo "but .."
    sleep 1
    echo "you may meant to say:"
    #echo "$cmd"
    sleep 1
    eval "$cmd"
    exiting
}


use(){
    echo -e "\t\t\tUSE()"
    local   line=${1:-''}
    local   path=${dir_rc:-''}

    local path1=''
    local path2=''
    local path3=''
    if [ "$line" = '' ];then
        echo 'line is empty' "$line"
        exiting
    fi
    if [ "$path" = '' ];then
        echo 'path is empty' "dir_rc must be set before loading: library.cfg"
        exiting
    fi

    echo "line: $line"
    local dir0=`echo "$line" | cut -d'.' -f1`
    local dir1=`echo "$line" | cut -d'.' -f2`
    local file1=`echo "$line" | cut -d'.' -f3`

    path1=$path/$dir0
    if [ -d "$path1"  ];then
        path2=$path1/$dir1
        if [ -d "$path2"  ];then
            path3=$path2/$file1.cfg
            if [ -f "$path3"  ];then

                cmd="source $path3"
                echo -e "cmd:\n $cmd"
                eval "$cmd"
            else
                echo 'invalid path3:' "$path3"
                correction "$path" "$file1"
            fi
        else
            echo 'invalid path2:' "$path2"
            correction "$path" "$dir1"
        fi
    else
        echo 'invalid path1:' "$dir0"
        correction "$path" "$dir0"
    fi

}



export -f use
export -f correction
#bashrc.proxy.proxy
#bashrc.sleep.sleep
#bashrc.cat
#bashrc.eval.detach
#bashrc.eval.commander
#bashrc.eval.confirm
#bashrc.fs.rm
#bashrc.grep.finder
#bashrc.grep.replace

#bashrc.layout.tree
#bashrc.ln.desktop
#bashrc.menu
#bashrc.prompt.history_sync
#bashrc.proxy.proxy
#bashrc.proxy.proxy1
#
#packagerc.array.str_to_arr
#packagerc.color.colors
#packagerc.color.printing
#packagerc.parse.parse
#packagerc.regular.regex.cfg
#packagerc.self.self

#http://www.thegeekstuff.com/2009/04/vi-vim-editor-search-and-replace-examples/
#http://sourceforge.net/projects/espeak/
#https://wiki.ubuntu.com/DebootstrapChroot
ocr(){
http://askubuntu.com/questions/280475/how-can-instantaneously-extract-text-from-a-screen-area-using-ocr-tools/280713#280713
}
array(){
http://tldp.org/LDP/abs/html/arrays.html
http://mywiki.wooledge.org/BashGuide/Arrays
http://www.cyberciti.biz/faq/finding-bash-shell-array-length-elements/
}
regexp(){
http://stackoverflow.com/questions/5074893/how-to-remove-the-last-character-from-a-bash-grep-output
}
arr_unset(){
   columns=("${columns[@]:1}") #removed the 1st element
    fields=(${columns[@]})
    #unset fields[0]
}
grep_many_files(){
    grep -lr "$PROJECT_DIR" "$1" 
}
nested_eval_quotes(){

    http://lists.gnu.org/archive/html/help-make/2007-08/msg00106.html
    http://stackoverflow.com/questions/9510362/bash-nested-quotes-and-eval
    http://mywiki.wooledge.org/BashFAQ/050
}
python(){
    http://askubuntu.com/questions/244641/how-to-set-up-and-use-a-virtual-python-environment-in-ubuntu
}
argss(){
    local first="$1"
    shift
    local others=("$@")
}
screenshot(){
    trace ''
}


casperjs(){
    trace ''
}
scrapy(){
    trace ''
}
is_valid(){
    #http://www.tldp.org/LDP/abs/html/comparison-ops.html
    debug   "is_valid() got:"
    debug   "1:$@ "

    if [ "$1" = '' ];then
        notify_send 'no arg given'
        #error_handler
        #return
       breakpoint 
    fi

    local file=$1
    local result=0
    green  'check existance'

    local res=$(ls $file 1>/dev/null 2>&1 && echo 'y' || echo 'n')
    if [ "$res" = 'y' ];then
        if  [ -s $file ];then
            debug  'file has content'
            actualsize=$(du -b "$file" | cut -f 1)
            #assert_equal_str $actualsize
            #notify_send1 "actual size:" "$actualsize"

            if [ $actualsize -lt 2 ];then
                red   'file is corrupted'
                let "result = 2"
            else
                debug  'file seems ok - has content'
                let "result = 1"
            fi
        else
            red  'file is empty'

            let "result = 3"
        fi
    else
        red  'file not exist'

        let "result = 4"
    fi
    #assert_equal_str "is_valid: $result"
    return $result
}



#
#caller1(){
#    #local num=2 #"$1"
#    #local str="${FUNCNAME[$num]}"
#    #notify_send1 "caller1()" "$str"
#    trace 'caller'
#}
#export -f caller1 
export -f is_valid 


export -f grep_many_files 

#source "$dir_root/steps.sh" && { bash -c  "$dir_root/steps.sh" ;}

proxy(){
   trap $dir_root/sadam.sh ERR 
    local args=( $@ )
local runner="${args[0]}" 
    type $runner  1>/dev/null 2>/dev/null 
    local res=$?
    if [ $res -eq 0  ];then
    local cmd="${args[@]}"
    eval "$cmd" >> /tmp/proxy
    eval "$cmd" 2>/tmp/err | tee /tmp/out 
else
    echo "[skipping] [cmd] $runner"
fi
}
random () 
{ 
    local num=$1;
    let "r = $RANDOM % $num";
    return $r
}
trace(){
local str="$@"
echo $str >> /tmp/proxy
}
every () 
{ 
    local num=${1:-5};
    local cmd_do="$2";
    local cmd_else=${3:-''};
    if [ -z "$cmd_else" ]; then
        cmd_else="trace $cmd_do";
    fi;
    local res=0;
    if [ $num -eq 0 ]; then
        res=0;
    else
        random $num;
    fi;
    res=$?;
    if [ $res -eq 0 ]; then
[        $num -ne  1 ] && {          echo "[cmd] $cmd_do" ;line_present WoW ! ..................................   1 / $num ;}
        sleep 1

        echo
        sleep 1
        eval "$cmd_do";
        res=$?
    else
        eval "$cmd_else";
        res=$?
    fi
    return $res
    sleep 3
}

export dir_root=~/JAIL/TREE
alias cdroot="cd $dir_root"
export file_first=$dir_root/.0_effort.cfg
export file_struct=$dir_root/.00_struct.cfg


step0(){
bash -c $dir_root/HIGHER_SELF/breath.cfg
}
step1(){
local cmd="source $file_first"
echo eval "$cmd"
}
step2(){
#local runner=$dir_root/RUNNERS/BANK/debug.sh
local runner=~/JAIL/TREE/RUNNERS/PENDING/wrapper/0.0.1/BANK/debug.sh
local cmd=$( $runner $file_first )
eval "$cmd"
}
step3(){
set -o  nounset
file_first=$dir_root/.0_effort.cfg
cmd="set -e;source $file_first"
every 2 "echo running noisy;sleep 2;eval $cmd" "echo running muted;sleep 2; eval $cmd 1>/dev/null"
res=$?
[ $res -eq 0 ] && { print_color 32 'GENIUS!' ;} || { print_color 31 'YET.. A GENIUS' ;}
if  [  $res -eq 1 ];then
cmd1="trap_steps; eval $cmd"
(eval $cmd1)
fi
set +o  nounset
}
random_remind(){
alias save_location="pwd >> $dir_root/recent.txt"
alias save_location
}
motivation(){

echo presenting - prior to loading the project !
sleep 4
echo think about it
sleep 2
    echo trapping control+c is important for updating the big stones first
    sleep 2
    echo that is exactly y - lister is so important - more  than hotkeys..
    sleep 2
    echo if backup indicate no progress - so every 5 do : cd to the test directory ! 

}
first_action(){

source $file_struct
}
file_present(){
    local file=$1
    local util=`which pv`
    local cmd="cat $file | xargs -0 echo | $util -qL 10"
    eval "$cmd"
}
line_present(){
    local line="$@"
    local util=`which pv`
    local cmd="echo $line | $util -qL 10"
    eval "$cmd"
}

quick_rollet(){
    local cmd=''
random 10
local res=$?
case $res in
    0)
        cmd="set -e"
        ;;
    1)
        cmd="set -u"
        ;;
    *)
        cmd="set +u;set +e"
        ;;
        
esac
          every 5 "echo [r] $cmd"
          
        eval "$cmd"


}

random_remind_about_self(){
echo running from bashrc file
echo presentation is prior to sourcing project 

}
steps(){
    clear
    every 13 random_remind_about_self
every 13    random_remind
every 12    motivation
every 1    first_action
#echo sleep 6
#sleep 6
#step0 && { step1 ; }

#( step1 ) && { step1; }
#( step2 ) && { step2; }
}


#steps
export_for_presentations(){
export -f file_present
export -f line_present
export -f proxy
export -f every
export -f trace
export -f random
export -f quick_rollet
}



export_for_presentations

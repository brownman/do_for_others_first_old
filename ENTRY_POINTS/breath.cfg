#!/bin/bash 
#must: run func remind_1_line first - eventhough its ugly
#step1: 
#step2: funcs.cfg - should  be load before this file - using .bashrc
#depend_funcs: 
#test_x: 
exec 2>/tmp/err
clear
delay=5
remind_1_line(){
present pv 'you better kill me now '
        sleep 1
       present pv '- and push some stuff forward in the next workspace'
       present pv 'I WILL  GIVE YOU POINT , MONEY WHATEVER ! - THINK ABOUT IT CAREFULLY'
       present pv 'still here ?'
        cmd="sleep $delay"
        eval "$cmd"
}
trap_err1(){
    echo '[ TRAP ] err'
        cat /tmp/err
        exit 1
}

if [ $0 != bash ];then
trap trap_err1 ERR
fi
trap_sigint(){
local cmd="$str_for_dooms_day"
proxy "$cmd"
    }
trap "trap_sigint $count $file_list" SIGINT

remind_standards(){


present pv 'THINK SMALL'
sleep 1
present pv 'wait !   breath first.. '
        sleep 1
        preset pv 'EVEN SMALLER!'
present pv        'because it is the first file to be loaded through bashrc - it should set new dev standards !'
present pv        'issue the command: standards to get remember about the rules + and even to edit the standards for a new and better level'


        sleep 1
        present pv 'REMEMBER TO JUMP TO THE NEXT WORKSPACE - FOR MINIMAL PUSH!'
present pv        `cat $BASH_SOURCE | grep '#step' | grep -v grep`
        sleep 3

        sleep 3


}

loop(){

    local dir_self=`dirname $BASH_SOURCE`
        local file_list=$dir_self/list.txt    
        local        count=1
        while read line;do

str_for_dooms_day="gvim +${count} $file_list"
            present figlet "step  $count"
                [ -z $line ] && { echo empty line;break ;}
#            echo $line
    local dirname=$( echo "$line" | cut -d'|' -f1 )
    echo "run: $dirname ?"
        local reason=$( echo "$line" | cut -d'|' -f2 )
        local dir=$( $dir_self/BANK/$line )
        local file="$dir/${line}.cfg"
        echo -n "but why ?"
        echo
        present pv "think.........................................."
        present pv " $reason"
        local cmd="ls -l $file"
        proxy "$cmd"
        let 'count+=1'
        done<$file_list
        present toilet "strength = $count"
}

check_dependencies(){
    echo 'dependencies check:'
#        proxy         type present
#       proxy         sleep 2
}
steps(){
#    check_dependencies
    every 2        remind_1_line
        every 5        remind_standards
        loop
}

steps







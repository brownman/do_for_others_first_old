#!/bin/bash -e
#vim: why error on ident?
#url: expand path: http://bash.cyberciti.biz/guide/Path_name_expansion
#depand: pv
#set -o nounset
#every 5 "present pv 'take a breath in other  workspace - it is crazingly easy!.... go on ! do it ! you can ! genius you ! yes you!'"
#every 5 "present pv 'easy first! set priorities !'"
msg="I am the robot of all workspaces and I will make your life so easy .. just imagine how efficient I really am - and I will  give your  my breath"
clear
#( flite -t "$msg" )&
#proxy present echo I AM the robot of all workspaces and I will MAke youR life  AWesome and eaaaaasyyy
alias allE="vi $BASH_SOURCE"
clear
shopt -s expand_aliases
proxy(){
local    args=( $@ )
local cmd=( "${args[@]}" )
echo "$cmd" >> /tmp/proxy
eval "$cmd"
}

install_trap(){
    echo install_trap
trap trap_err ERR
exec 2>/tmp/err
}
#alias proxy="proxy1"


assertEquals(){
    local arg1="$1"
    local arg2="$2"
    local res=0
if [ "$arg1" = "$arg2" ];then
    res=0
else
    res=1
fi
return $res
}

trap_err(){
    local str_caller=( `caller` )
echo "trap err"
    local dir=`dirname "${str_caller[1]}"`
local cmd="pushd $dir && vim +${str_caller[@]} && popd"

#local cmd1=$( gxmessage -file /tmp/err -title 'trap_err'  )
echo

[ -s /tmp/err ] && { echo /tmp/err;echo; present pv `cat /tmp/err | cut -d':' -f3-` ; }
#go_home

( proxy update_clipboard \"$cmd\" )
#echo 'press contol+c to use clipboard'
#proxy sleep 4
#exit 0
go_home
}


sourcing(){


    local file=$1

    local dirname=$2

    local filename=`basename $file | cut -d'.' -f1`
 #   echo -en "\t\t\t $dirname /"
# echo "shlvl: $SHLVL"
 echo -e "\t\t\t[..] $filename"
    proxy sleep 2

    local cmd="source $file"

    if [ $0 = bash ];then
        eval "$cmd"
    else
        #before sourcing the file - we only want to test it in a sub-shell
        #( set -e; eval "$cmd" )
local cmd_trap="trap trap_err ERR"

#(          eval "$cmd_trap;$cmd"  )
#  ( ;eval "$cmd" )

#          eval "$cmd_trap &&  $cmd" 
eval "$cmd"

    fi
    local res=$?
    if [ $res -eq 0 ];then
        proxy echo V
    else
proxy  echo       X
    fi

}
print_tag(){
    local tag="$1"
    local str="$2"
    local slow=${3:-false}
    if [ "$slow" = true ] && [ $0 != bash ] ;then
        echo -ne "\t\t\t[ $tag ] "
        present pv $str
    else
        echo -ne "\t\t\t[ $tag ] "
        echo $str
    fi

}

#source_nested(){
#    local dir=$1
    #    ( $dir/breath.cfg &)
 #   source $dir/breath.cfg

#}
read_script_tag(){
    local file=$1
    local dir=`dirname $file`
    local tag=$2
    local mute=$3

    local top=5
    local str=$( cat $file | head -${top} | grep $tag | sed "s/#$tag://g" 2>/tmp/err )
    #   local res=$?
    #   echo "res: $?"
    if [ -n "$str" ] ;then


        print_tag "$tag" "$str" "$mute"

    else
        #       echo "$file" | xsel --clipboard 
        echo        "[ERROR] empty tag $tag"
        local cmd="vi $file"
        #        proxy present_file /tmp/err
        proxy update_clipboard "$cmd"
        if [ $0 != bash ];then
            proxy go_home
        fi
    fi
    #| tail -1 

}

start(){
    [ -f /tmp/proxy ] && { proxy rm /tmp/proxy; }
}
present_mode(){
    echo -n "[ MODE ]"
    proxy sleep 1
    echo "$MODE"
    proxy sleep 2
}
set_env(){
    #    export FLAG_SLOW=true
    export max_lines=5
    #dir_self=`dirname $BASH_SOURCE`
    dir_self="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    #source $dir_self/quick.cfg
    proxy sleep 3
    export ptrn="$dir_self/BANK/*"


}
aliasing(){
    local file=$1
    local filename=`basename $file`
    local filename1=`basename $filename | cut -d'.' -f1 `
    local dir=`dirname $file`

    local dirname=`basename $dir`

    local cmd="export dir_${dirname}=\"$dir\""
    proxy "$cmd"
    proxy  "alias ${dirname}E='vi $dir/breath.cfg'"
    #    proxy "alias ${str}_steps='$file'"

    proxy "alias cd_$dirname='cd $dir'"

echo     proxy "alias sourcing_$dirname='sourcing $file'"
}
proxy(){
    #zbanun
    local args=( "$@" )
    local cmd="${args[@]}"
    echo "$cmd" >> /tmp/proxy
    eval "$cmd"
}
find_files(){

    local ptrn1="*.cfg"

    local  dirs=$( ls -d  $ptrn )

    #    local str1=`dirname $BASH_SOURCE | rev | cut -d'/' -f1 | rev`
    #    echo -e "\t[$str1]"

    for dir in $dirs;do
        local dirname=$( basename $dir )
        echo "[ $dirname ]"
        #        ls -l $dir

        local  files=$( ls $dir/$ptrn1 )
        for file in $files;do
            #echo $file

#proxy aliasing $file

#echo $file
            #proxy source $file
            local str=`basename $file`
            #echo -e "\t[$str]"
            #local funcs=$( cat $file | grep "(){" | sed 's/(){//g' )
            #for func in $funcs;do
            #	read_tag "$file" "$func" info
            #done
            #if [ "$MODE" = PENDING ];then
            read_script_tag "$file" imagine true
            #"$FLAG_SLOW"
            read_script_tag "$file" info

            read_script_tag "$file" pending

            #           else
            #               echo mode is not: pending
            #       fi
#            echo next proxy sourcing $file $dirname
#    files=`ls $dir_self/BANK/*.cfg`

        done

    done
}

present_file(){
    local file=$1
    echo -n '[ FILE ] '
    echo $file
    cat $file | tail -${max_lines}
}
finish(){
    local cmd="present_file /tmp/proxy"
    alias log="eval \"$cmd\""
}
steps(){
    #    proxy present_mode

#proxy install_trap
    proxy start
    proxy set_env
    proxy find_files
    #    proxy finish
}

#set -o nounset
steps
#alias proxy 1>/dev/null 2>/dev/null && { unalias proxy; }

#unalias proxy

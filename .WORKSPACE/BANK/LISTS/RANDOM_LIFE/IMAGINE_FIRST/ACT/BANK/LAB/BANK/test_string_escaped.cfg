#info: escape_the_unescaped
#( echo "$str" ) && { echo good; } || { echo bad; }
#( echo "$str" | sed 's/"/\"/g' ) && { echo good; } || { echo bad; }
#( echo "$str" | sed 's/"/\"/g' | grep '\\') && { echo good; } || { echo bad; }
str1='\"s\df' 
str2='"s\df' 

func0(){
    local str="$@"
        echo "$str" | sed 's/"/\\"/g' | grep '\\\\'  1>/dev/null 
        return $?
}
func(){
    local str="$@"
        local str1=$( echo "$str" | sed 's/"/\\"/g' )
(        echo "$str1" | grep '\\\\' 1>/dev/null )
#1>/dev/null 
        local res=$?
        if [ $res -eq 0 ];then
            echo "$str"
        else
            echo "$str1"
                fi
                return $res
}

func_yn(){
    local str="$1"
        ( func "$str" 1>/dev/null ) && { echo PASS; } || { echo FAIL; } 
}

func_use(){
    local str="$1"
        ( func "$str" ) 
 #   ( func ) && { echo PASS; } || { echo FAIL; } 
}


test_ok(){
    present_case "$str1"
}
test_error(){
    present_case "$str2"
}
present_case(){
    local str="$1"
        assume "$str"
        func_yn "$str"
}
present_use(){
    echo 'input: 2 strings '
        echo 'target: the output is the same'
local res1=$( func_use "$str1" )
local res2=$( func_use "$str2"  )
assertEquals "$res1" "$res2"
#echo $?
}
present_mission(){
    type func
}
tests(){
    ( test_error )
        ( test_ok )
}
steps(){
    present_mission
        tests
        present_use
}
steps

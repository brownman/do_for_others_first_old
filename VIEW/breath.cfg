#!/bin/bash -e
#vim: why error on ident?
#url: expand path: http://bash.cyberciti.biz/guide/Path_name_expansion
#depand: pv
#set -o nounset
clear
shopt -s expand_aliases
if [ $0 = bash ];then
    exec 1>/dev/null
    ptrn="$dir_self/BANK/*"
    export MODE=mute
else
    str="$1"
    export action_type=`higher $str`
    export MODE=$action_type
fi

alias proxy="proxy1"
print_tag(){
    local tag="$1"
    local str="$2"
    local slow=${3:-false}
    if [ "$slow" = true ] ;then
        echo -ne "\t\t\t[ $tag ] "
        present pv $str
    else
        echo -ne "\t\t\t[ $tag ] "
        echo $str
    fi

}

source_nested(){
    local dir=$1
    #    ( $dir/breath.cfg &)

}
read_script_tag(){
    local file=$1
    local dir=`dirname $file`
    local tag=$2
    local mute=$3

    local top=5
    local str=$( cat $file | head -${top} | grep $tag | sed "s/#$tag://g" 2>/tmp/err )
    #   local res=$?
    #   echo "res: $?"
    if [ -n "$str" ] ;then


        print_tag "$tag" "$str" "$mute"

            else
        #       echo "$file" | xsel --clipboard 
        echo        "[ERROR] empty tag $tag"
        local cmd="cd $dir"
        #        proxy present_file /tmp/err
        proxy update_clipboard "$cmd"
        if [ $0 != bash ];then
            proxy go_home
        fi
    fi
    #| tail -1 

}

start(){
    rm /tmp/proxy
}
present_mode(){
    echo -n "[ MODE ]"
    proxy sleep 1
    echo "$MODE"
    proxy sleep 2
}
set_env(){
    export FLAG_SLOW=true
    export max_lines=5
    #dir_self=`dirname $BASH_SOURCE`
    dir_self="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    #source $dir_self/quick.cfg
    proxy sleep 3
    export ptrn="$dir_self/${action_type}/*"


}
aliasing(){
    local file=$1
    local filename=`basename $file`
    local filename1=`basename $filename | cut -d'.' -f1 `
    local dir=`where_am_i $file`

    local dirname=`basename $dir`

    local cmd="export dir_${dirname}=\"$dir\""
    proxy "$cmd"
    proxy  "alias ${dirname}E='vi $dir/breath.cfg'"
    #    proxy "alias ${str}_steps='$file'"

    proxy "alias cd_$dirname='cd $dir'"
    source_nested "$dir"
}
proxy1(){
    #zbanun
    local args=( "$@" )
    local cmd="${args[@]}"
    echo "$cmd" >> /tmp/proxy
    eval "$cmd"
}
find_files(){

    local ptrn1="*.cfg"

    local  dirs=$( ls -d  $ptrn )

    #    local str1=`dirname $BASH_SOURCE | rev | cut -d'/' -f1 | rev`
    #    echo -e "\t[$str1]"

    for dir in $dirs;do
        local dirname=$( basename $dir )
        echo "[ $dirname ]"
        #        ls -l $dir

        local  files=$( ls $dir/$ptrn1 2>/dev/null )
        for file in $files;do
            #echo $file
            proxy aliasing $file
            #proxy source $file
            local str=`basename $file`
            #echo -e "\t[$str]"
            #local funcs=$( cat $file | grep "(){" | sed 's/(){//g' )
            #for func in $funcs;do
            #	read_tag "$file" "$func" info
            #done
if [ "$MODE" = PENDING ];then
            read_script_tag "$file" imagine "$FLAG_SLOW"
            read_script_tag "$file" info
            read_script_tag "$file" pending
            else
                echo mode is not: pending
        fi
        done

    done
}

present_file(){
    local file=$1
    echo -n '[ FILE ] '
    echo $file
    cat $file | tail -${max_lines}
}
finish(){
    local cmd="present_file /tmp/proxy"
    alias log="eval \"$cmd\""
}
steps(){
    proxy present_mode
    proxy start
    proxy set_env
    proxy find_files
    #    proxy finish
}

#set -o nounset
steps
unalias proxy

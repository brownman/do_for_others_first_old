#http://stackoverflow.com/questions/4956873/cutting-first-n-and-last-n-columns



traperror () {
    print_func
    local err="$1" # error status
    local line="$2" # LINENO
    local linecallfunc="$3" 
    local command="$4"
    local funcstack="$5"
    echo "<---"
    echo "ERROR: line $line - command '$command' exited with status: $err" 
    if [ "$funcstack" != "::" ]; then
        echo -n "   ... Error at ${funcstack} "
        if [ "$linecallfunc" != "" ]; then
            echo -n "called at line $linecallfunc"
        fi
    else
        echo -n "   ... internal debug info from function ${FUNCNAME} (line $linecallfunc)"
    fi
    echo
    echo "--->" 
}

parse_caller(){
    print_func
    str="$1"
    echo "caller: $str"
    local num=`echo "$str" | cut -d' ' -f1`
    local file=`echo "$str" | cut -d' ' -f3`
    cmd="$EDITOR $file +$num"
    update_clipboard "$cmd"
}
parse_primary(){
    print_func
    local all="$1"
    local str=`echo $all | sed 's/line /+/g'`
    color4 "PARSE IT:"
    echo "$str"
    str_to_arr "$str"
    #we have: arr
    num="${#arr[@]}"
    exe="${arr[0]}"
    line="${arr[1]}"
    line=`remove_trailing "$line"`
    error="${arr[2]}"
    error_code="${arr[3]}"
    blue 'Assume:'
    echo -e "\t\tarray size: $num"
    echo -e "\t\texe: $exe"
    echo -e "\t\tline: |$line|"
    echo -e "\t\terror: $error"
    echo -e "\t\terror+code: $error_code"

    notify-send "$error" "$error_code"
    cmd="$EDITOR $exe $line" 
    update_clipboard "$cmd"

}
update_clipboard(){
    print_func
    if [ $# -eq 1  ];then
    local cmd="$1"
    notify-send 'clipboard updated' "$cmd"
    echo "$cmd"
    xsel "$cmd"
fi
}

export -f parse_caller
export -f parse_primary
export -f update_clipboard
export -f traperror


Author: lantz moore <lmoore@debian.org>
Description: fixes a number of issues related to promiscuous mode 
see Debian bugs #333068, #214990 and #202198
--- a/ifpromisc.c
+++ b/ifpromisc.c
@@ -51,6 +51,8 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <dirent.h>
+#include <sys/stat.h>
 
 struct interface
 {
@@ -74,8 +76,9 @@ struct packet_info
     int index;
     int type;
     int proto;
-    int inode;
+    ino_t inode;
     char *cmd;
+    char *pid;
     struct packet_info *next;
 };
 
@@ -110,9 +113,9 @@ static void read_proc_net_packet()
         int             type = 0;
         unsigned int    proto = 0;
         int             index = 0;
-        unsigned int    inode = 0;
+        unsigned long   inode = 0;
 
-        if (sscanf(buf, "%*p %*d %d %x   %d %*d %*u %*u %u",
+        if (sscanf(buf, "%*p %*d %d %x   %d %*d %*u %*u %lu",
                   &type, &proto, &index, &inode) == 4)
         {
             struct packet_info *pi;
@@ -137,7 +140,7 @@ static void read_proc_net_packet()
 }
 
 /* look up an entry from /proc/net/packet by inode */
-static struct packet_info *find_packet_info(int inode)
+static struct packet_info *find_packet_info(ino_t inode)
 {
     struct packet_info *p;
     for (p = proc_net_packet; p; p = p->next)
@@ -187,7 +190,10 @@ static void walk_process(char *process)
 
         if (stat(path, &statbuf) == -1)
         {
-            perror(path);
+            if (errno != ENOENT)
+            {
+                perror(path);
+            }
             continue;
         }
 
@@ -202,6 +208,7 @@ static void walk_process(char *process)
             snprintf(path, sizeof(path), "/proc/%s/exe", process);
             readlink(path, link, sizeof(link) - 1);
             info->cmd = strdup(link);
+            info->pid = strdup(process);
         }
     }
 
@@ -235,46 +242,42 @@ static void walk_processes()
 }
 
 /* return 1 if index is a member of pcap_session_list, 0 otherwise. */
-static int has_packet_socket(int index)
+static struct packet_info *has_packet_socket(int index)
 {
     struct packet_info *p;
     for (p = proc_net_packet; p; p = p->next)
     {
         if (p->index == index)
         {
-            return 1;
+            return p;
         }
     }
-    return 0;
+    return NULL;
 }
 #endif /* __linux__ */
 
 static void ife_print(struct interface *ptr)
 {
 #ifdef __linux__
-    int promisc = ptr->flags & IFF_PROMISC;
-    int has_packet = has_packet_socket(ptr->index);
+    int                 promisc = ptr->flags & IFF_PROMISC;
+    struct packet_info *sniffer = has_packet_socket(ptr->index);
+    struct packet_info *p;
 
-    if (promisc || has_packet)
+    if (promisc || sniffer)
     {
         printf("%s:", ptr->name);
         if (promisc)
             printf(" PROMISC");
-        if (has_packet)
+
+        if (sniffer)
         {
-            struct packet_info *p;
-            printf(" PF_PACKET(");
-            p = proc_net_packet;
-            if (p)
+            printf(" PACKET SNIFFER(");
+            printf("%s[%s]", sniffer->cmd, sniffer->pid);
+            for (p = sniffer->next; p; p = p->next)
             {
-                printf("%s", p->cmd);
-
-                for (p = p->next; p; p = p->next)
+                if (p->index == ptr->index)
                 {
-                    if (p->index == ptr->index)
-                    {
-                        printf(", %s", p->cmd);
-                    }
+                    printf(", %s[%s]", p->cmd, p->pid);
                 }
             }
             printf(")");
@@ -284,7 +287,7 @@ static void ife_print(struct interface *
     else
     {
         if (!q)
-            printf("%s: not promisc and no PF_PACKET sockets\n",
+            printf("%s: not promisc and no packet sniffer sockets\n",
                    ptr->name);
     }
 #else
@@ -348,8 +351,6 @@ static void if_print()
 #endif
 	 continue;
       }
-      if (!memcmp(ifr->ifr_name, "lo", 2))
-         continue;
       ife_print(&ife);
    }
 }

echo '[ PROXY.cfg ]'
#help:   log each command
#question:   how to quickly debug an error
#depend: $file_robot 
export MODE_CLEAR=false
export MODE_SLEEP=true
export MODE_XCOWSAY=false
xsel(){
util=/usr/bin/xsel
cmd="echo \"$@\" | $util --clipboard"
proxy "$cmd"
#proxy  "$cmd"
}
ensure(){
    echo -ne '[ENSURE]\t'
        echo "$@"
        local     args=( "$@" )
        let 'res=1'

        if [ "${#args[@]}" -eq 2 ];then

            local action="${args[0]}"
                local item="${args[1]}"
                local cmd=''
    case "$action" in
                dir_exist)
                    [ ! -d "$item" ] && cmd="mkdir $item"
                    ;;
                *)  robot 'ensure not defined yet:' "$action"
                    ;;
                esac
        else
                        robot "echo supply 2 args: $@"
        fi

                    if [ -a "$cmd" ];then
                        proxy "$cmd"
                    fi

}



update_clipboard(){
    local cmd="$@"
        xsel "$cmd"
}
goto_bug(){
    local cmd="$1"
local cmd1="$sh_wrapper $cmd" 
local str_res=$( proxy "$cmd1" )
local    cmd2="$sh_parser  $str_res"
 (   proxy "$cmd2" )
}

xcowsay(){
    if [ "$MODE_XCOWSAY" = true ];then
        /usr/games/xcowsay $1
            fi
}

sleep(){
    if [ "$MODE_SLEEP" = true ];then
        /bin/sleep $1
            fi
}
clear(){
    if [ "$MODE_CLEAR" = true ];then
        /usr/bin/clear
            fi
}
returning(){
    return  1
}
exiting(){
    exit 1
}
run_list(){
    echo -e '[running list at dir]\t'
        local path=$1
        echo "$path"
        local       str=`basename $path`

        assert dir_exist "$path"

        proxy figlet "$str"
        proxy sleep 5
        proxy xcowsay "list: $str"

        pushd "$path" >/dev/null
        pwd
        tree
        local  cmd="( $sh_lister )"
        proxy "$cmd"

        popd >/dev/null
}
proxy(){
#info: proxy each command:
#desc: set a fallback to premature call to a function
#example: update sleep() upon executer etc

    local args=( "$@" )
        local cmd="${args[@]}"
        robot "$cmd"
        eval "$cmd" 
}

robot(){
#info: log a command OR just explain inline using the command: robot
#warn: dont call the proxy/assert
    local args=( "$@" )
        echo '__________________________' >> $file_robot
        echo -e "caller]\t\t\t$0" >> $file_robot
#echo  "[line_no] ${LINENO[1]}" >> $file_robot
        echo  -e "line_no]\t\t\t${BASH_LINENO[1]}" >> $file_robot
#echo  "[bash_source] ${BASH_SOURCE[2]}" >> $file_robot

        if [ ${#args[@]} -gt 0 ];then

            local cmd="${args[@]}"

                local arg0="${args[0]}"

    case "$arg0" in
                zzplease)
                    echo "[PLEASE] $cmd"
                    ;;
                *)

                    echo -e "proxy]\t\t\t$cmd" >> $file_robot
                    ;;
                esac

        else
            echo  'no args'
                fi


}
assert(){
    echo -ne '[ASSERT]\t'
        echo "$@"
        local     args=( "$@" )
        let 'res=1'

        if [ "${#args[@]}" -eq 2 ];then

            local action="${args[0]}"
                local item="${args[1]}"

    case "$action" in
                dir_exist)
                    [ -d "$item" ] && res=0
                    ;;
                file_exist)    
                    [ -f "$item" ] && res=0
                    ;;
                file_has_content)  
                    [ -s "$item" ] && res=0
                    ;;
                *)  robot 'assertion not defined yet:' "$action"
                    ;;
                esac
        else

            robot "echo supply 2 args: $@"

                fi

                echo "[res] $res"
                if [ $res -eq 1 ];then
                    local str=`echo "$action" | sed 's/_/ /g'`
                        proxy flite -t "$str"
                        echo 'returning/exiting'
                        if [ $0 = "bash" ];then

                            cmd="returning $res"
                                proxy "$cmd"
                        else



                            cmd="exiting $res"
                                proxy "$cmd"
                                fi

                                fi

}

#log control
export -f proxy
export -f robot

#flow control
#if
export -f assert
export -f ensure
#break
export -f returning
export -f exiting

#list control
export -f run_list

#utils control
export -f clear
export -f sleep
export -f xcowsay
export -f xsel
#quick
export -f update_clipboard
export -f goto_bug

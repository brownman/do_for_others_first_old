if [ $res -eq 1 ]; then
        local str=`echo "$action" | sed 's/_/ /g'`;
        echo proxy flite -t "$str";
        echo 'returning/exiting';
        if [ $0 = "bash" ]; then
            cmd="returning $res";
            echo proxy "$cmd";
        else
            cmd="exiting $res";
            echo proxy "$cmd";
        fi;
    else
        echo '[OK]'
    fi

run_dir(){
    echo -n "[ run_dir] "
        echo $dir
        local dir0="$1"
        local dir=`echo "$dir0"`
#local dir_self=$(where_am_i)
#  local dir_self=$( echo `dir_self` )
#`dirname $BASH_SOURCE`

        if [ -d "$dir" ];then
            print_color 34 "[RUN_DIR] $dir";

    local            file="$dir/breath.cfg"
        [ -f "$file" ] && { source $file; } || { echo 'file not found' "$file";return 0 ; }
        else
            echo "no such dir:" "=_${dir}_=" 
                proxy       go_home 
                fi 
                proxy sleep 5
}
callers(){
    print_color 35 '[callers]'
        present1 figlet CALLERS
        local count=0
        local res=0
        local max="${#BASH_LINENO[@]}"
        let 'max-=1'
        while [ "$count" -lt  "$max" ];do
            echo -n "$count of $max : "
                local str_caller=$( caller "$count" )
#if [ "$str_callers" = '' ];then
#    break
#    else
                echo "vi +${str_caller}" 2>/dev/null
#    fi

                let 'count+=1'
                done
}


       esac
 
    case "$type" in 
    echo)
        /bin/echo $@
    normal)
        echo "$desc"
        ;;
    figlet)
        eval "figlet '$desc'";
    proxy sleep 2
        ;;
    notify-send)
        eval "notify-send '$desc' '$desc2'"
        ;;
    pv)
        eval "pv '$desc'"
        ;;
    toilet)
        eval "toilet --gay \"$desc\"";
    proxy sleep 2
        ;;
    *)
        eval "print_color 31 'present of type: $1 not defined '"
        go_home
        ;;
    esac

read_tag(){
    local file=$1
    local funcs=$2
    local tag=$3
    echo -e "\t\t[ $func ]"
    #alias "$func=\"echo $func\""


    local str=$( cat $file | grep $func -A 1 | grep $tag )
    if [ -n "$str" ];then
        echo -ne "\t\t\t[ $tag ] "
        echo $str
    else 
        echo "[ERROR] empty tag $tag"
        local cmd="vi $file"
        update_clipboard "$cmd"
        proxy go_home
    fi
    #| tail -1 
}


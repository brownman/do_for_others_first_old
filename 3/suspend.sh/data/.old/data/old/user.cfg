#!/bin/bash
#cant call back to tasks - its a help file!
################################### links
#shift $PWD/public/cfg/lib.trap.sh
#echo "doing something wrong now .."
#echo "$foo"
#exit
#set -o pipefail  # trace ERR through pipes
#set -o errtrace  # trace ERR through 'time command' and other functions
#http://mywiki.wooledge.org/Quotes




#export remind2="show a picture of the whiteboard - from Blogger + write on the whiteboard - in past tense - imagine that u already did it.!"
################gui menus: ######################

#absolute path
export DEBUG=false
export PROJECT_DIR=~/.magnify_the_small

export sleeper="again update next"


export routes_3=" we job study testing youtube"
export childish="Exit children_story ideas questions answers"
export power_source="Exit vivik collaboration priorities"


#export workflows="Exit motivation testing routes"

export workflows="fun we job study edit"

#################################################

export SHOW_BUTTONS=true
export LEVEL_EFFICIENCY='H'
#export WORKFLOW_DELAY=5 
export WORKFLOW_DELAY=60
export SHOW_SIMILAR_WORDS=false
export SILENCE=false
#export TIME_STR='0:00 =0:45'
export TIME_STR='0:10 =0:25 -5'
export SHOW_LESSON=true
export NAME1='Ofer'
export LANG_NAME="RU"
export LANG_NUM="14"
export msg1="breakthrough is here - stand up now"
#breakthrough  coming in 60 seconds - please close your eyes and accept it"


export REMIND='how does she feel right now ?'
edit_stuff(){
    echo0 'please rest for  20 seconds and increase the order' 
    gedit        $TODAY_DIR/yaml/rules.yaml & 
    #sleep1 20
    #echo0 'increase motivations' 
    #gedit        $TODAY_DIR/txt/glossary.txt & 
    #gedit        $TODAY_DIR/txt/motivations.txt & 
    gedit        $TODAY_DIR/yaml/ideas.yaml & 
}
echo0(){
    xterm1 $PLUGINS_DIR/translation.sh sentence "$1" true  
    #true =many languages
}
echo01(){
    xterm1 $PLUGINS_DIR/translation.sh sentence "$1" false 
    #true =many languages
}

error_handler(){
    local msg='found error'
    trace "$msg"
    #echo4 "$msg" 
    #choose4 $STATIC_DIR/exit.txt
    Backtrace1

    #dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend
    #suspension
    #profit 
    if [ "$STRICT" = true ];then

        seconds=360
        echo -n  "going to sleep in: " 
        red "$seconds seconds"
        #sleep1 $seconds 
        #suspesion
    fi

    exit 1
}
help1(){
    cyan 'help:' 
    echo -n "options: "
    green "$1"
}

function Backtrace1 
{
    local _start_from_=0

    local params=( "$@" )
    if (( "${#params[@]}" >= "1" ))
    then
        _start_from_="$1"
    fi

    local i=0
    local first=false
    while caller $i > /dev/null
    do
        if test -n "$_start_from_" && (( "$i" + 1   >= "$_start_from_" ))
        then
            if test "$first" == false
            then
                red "BACKTRACE IS:"
                first=true
            fi
            caller $i
        fi
        let "i=i+1"
    done
    echo '_+_+_+_+_+'
}

function error() {
JOB="$0"              # job name
LASTLINE="$1"         # line of error occurrence
LASTERR="$2"          # error code
echo "ERROR in ${JOB} : line ${LASTLINE} with exit code ${LASTERR}"
Backtrace1
exit 1
}

#trap 'error ${LINENO} ${$?}' ERR
trap error_handler ERR                                                           # ! ! ! TRAP ERR ! ! !

trap "eval exiting ${LINENO} ${$?}" SIGINT SIGTERM
#source $PWD/public/cfg/tmp/lib.trap.sh


suspension(){
    dbus-send --system --print-reply     --dest="org.freedesktop.UPower"     /org/freedesktop/UPower     org.freedesktop.UPower.Suspend
}

is_valid(){
    trace  "is_valid() got:"
    trace "1:$1 2:$2"

    if [ "$1" = '' ];then
        trace 'no arg given'
        error_handler
    fi

    local file=$1
    local result=0
    debug yellow 'check existance'
    if [ $file ];then
        debug green 'file exist'
        if  [ -s $file ];then
            debug green 'file has content'
            actualsize=$(du -b "$file" | cut -f 1)
            echo -n 'size: '
            debug cyan $actualsize

            if [ $actualsize -eq 0 ];then
                debug red  'file is corrupted'
                #let "result = 1"
            else
                debug green 'file seems ok'
                let "result = 1"
            fi
        else
            debug red 'file is empty'
        fi
    else
        debug red 'file not exist'
    fi
    return $result
}


export EMPATHIC='true'
export INSTALL='true'
export PROFIT='true'
export VERBOSE='true'
export STRICT='false'
export TIMEOUT_NS='-t 20000'

#########url links
export url_blog="http://thoughts-about-something.blogspot.co.il"
export url_calendar="https://www.google.com/calendar/render?tab=mc"
export url_tasks="https://mail.google.com/tasks/ig?pli=1"
export mm_link='http://drichard.org/mindmaps/'



#private reports | blogging
export private_txt=/tmp/private.txt 
#~/tmp/bash_koans/txt

export blank_txt=/tmp/blank.txt
export readme_md=$PROJECT_DIR/README.md
export missions_txt=/tmp/missions.txt
export schedule_txt=/tmp/gcalcli_agenda_full.txt
export mind_map_png=/tmp/mm.png
#relative dirs
export PUBLIC_DIR=$PROJECT_DIR/public
export PRIVATE_DIR=$PROJECT_DIR/private

export TODAY_DIR=$PROJECT_DIR/today


export CFG_DIR=$PUBLIC_DIR/cfg
export file_data=$CFG_DIR/blank.yaml

export WORKFLOWS_DIR=$CFG_DIR/workflows
export PLUGINS_DIR=$PUBLIC_DIR/plugins
export STORY_DIR=$PUBLIC_DIR/story
export STATIC_DIR=$PUBLIC_DIR/story/static
export TASKS_DIR=$PUBLIC_DIR/tasks 
#export MENUS_DIR=$PUBLIC_DIR/menus
#export KOANS_DIR=$PUBLIC_DIR/koans
export SCREENS_DIR=$PUBLIC_DIR/screens

####### .sh
export tasks_sh="$PUBLIC_DIR/tasks.sh"
#export tpng="$TASKS_DIR/txt_to_png.sh"
################################  language stuff####################
arr1=( IT AR HI RU )
#arr2=( )
export itR=1
export tlR=1
export enR=1
export ruR=1
export arR=2
export hiR=3
#dir_essay=~/tmp/timer2/essays
##################################  global vars##################

date1="$(date +%H:%M)"
export PLAYING_ON=false
export LANG_DEFAULT=ru
#export LANG_ESSAY=ru
export color_arr1=( blue green red black )
export GUI='true'
export SILENT_FETCH=false
export SILENT=false

export TIMEOUT1=20
export TIMEOUT_LET_ME_SLEEP=60
#export LESSON=14
export TRANSLATE=true
export SLEEP=30
#export GXMESSAGE1=echo  -ontop -sticky -timeout 10 -buttons \'last task is: "$last_task"\' "message1"

GXMESSAGET='-wrap -ontop -sticky -timeout 60'
#GXMESSAGE1="-nofocus -wrap -ontop -sticky -timeout 20"
#GXMESSAGE0="-nofocus -wrap -ontop -sticky"
#export ICONIC='' 
export ICONIC='-iconic'
export SLEEPS=15
export SUSPEND=true

export INPUT_THANKS=true
export itR=1
export tlR=1
export enR=1
export ruR=1
export arR=2
export hiR=3
############################ colors
export RESTORE='\033[0m'

export RED='\033[00;31m'
export GREEN='\033[00;32m'
export YELLOW='\033[00;33m'
export BLUE='\033[00;34m'
export PURPLE='\033[00;35m'
export CYAN='\033[00;36m'
export LIGHTGRAY='\033[00;37m'

export LRED='\033[01;31m'
export LGREEN='\033[01;32m'
export LYELLOW='\033[01;33m'
export LBLUE='\033[01;34m'
export  LPURPLE='\033[01;35m'
export LCYAN='\033[01;36m'
export WHITE='\033[01;37m'

#############  .bashrc related
alias duh="du -h -d 0 [^.]*"

spell1(){
    aspell -a <<< "$1"
}

######################################## functions !!!!!!!!!!!!!!!
cyan() {
    echo "${LCYAN}$1"
    tput sgr0
    #fi
}
white() {
    echo "${WHITE}$1"
    tput sgr0
}
green() {
    echo "${LGREEN}$1"
    tput sgr0
}

red() {
    echo "${LRED}$1"
    tput sgr0
}
yellow() {
    echo "${LYELLOW}$1"
    tput sgr0
}
blue() {
    echo "${LBLUE}$1"
    tput sgr0
}
echo2(){
#    if [ "$VERBOSE" = true ];then
#        echo "verbose: $1" >&2
#    fi
    echo "$1"

}
trace(){
#    if [ "$VERBOSE" = true ];then
#        echo "verbose: $1" >&2
#    fi
    echo "$1"

}
echo22(){
    echo -n '_'
}
random1()
{
    local num="$1"
    if [ $num -eq 0 ];then
        error_handler
    fi

    let "r = $RANDOM % $num"
    #green "r = $r"
    #counter=$r
    #let "reminder = $counter % 4"
    #echo1 "the reminder is: $reminder"
    return $r
}
rainbow(){
    local line1="$1"
    random1 4
    local num=$?
    #red "num: $num"
    local color0="${color_arr1[$num]}"

    #gxmessage "$line1" -buttons "$line3" -sticky -timeout 11 -title "$input_ws"  -geometry 600*900 -font "serif bold 18" -wrap -fg $color $ICONIC 
    gxmessage "$line1" -title "reminder:"  -geometry 600*900 -font "serif bold 18" -fg $color0 $GXMESSAGET 

}
split2(){
    echo2 "split2(): $1"
    while read $1 
    do
        eval items=($line)
        for i in "${items[@]}"
        do
            echo $i
        done
    done
}


echo3(){
    #caller 0
    #red "$1"

    echo -n "_"
}

echo1(){


    echo -n "."
    #red "$2"

    #green ""
    #$1"

    #caller 0


}
Backtrace2 () {

    echo "Backtrace is:"
    i=0
    while caller $i
    do
        i=$((i+1))
    done

}
function Backtrace1 
{
    local _start_from_=0

    local params=( "$@" )
    if (( "${#params[@]}" >= "1" ))
    then
        _start_from_="$1"
    fi

    local i=0
    local first=false
    while caller $i > /dev/null
    do
        if test -n "$_start_from_" && (( "$i" + 1   >= "$_start_from_" ))
        then
            if test "$first" == false
            then
                red "BACKTRACE IS:"
                first=true
            fi
            caller $i
        fi
        let "i=i+1"
    done
    echo '_+_+_+_+_+'
}

exiting()
{
    red "exiting() got: 0:$0 1: $1 , 2: $2"
    #sleep 2s
    #local file=$STATIC_DIR/exit.txt
    notify-send 'Exiting'
    if [ "$VERBOSE" = true ];then
        #Backtrace1
        echo 'backtrace'
    fi
    #echo 'exiting' | flite
    #choose4 $file
    #remind_me_please 

    #if [ $locker ];then
    #  yellow "removing $locker"
    #    ##kill
    #    cat $locker
    #    blue "process exit naturally"
    #    `rm $locker`
    #fi

    exit
}
sleep1()
{
    local sec="$1"

    echo "sleep ${sec}s"

    for (( c=1; c<=$sec; c++ ))
    do
        echo -n "$c "
        sleep 1s
    done


}


pids3(){
    #echo "\$$: $$"
    #echo "\$1: $1"
    echo "grep $1"
    ps aux | grep $1 
    echo "grep .sh"
    ps -aux | grep .sh
}
pids1(){
    echo2 "pids() got: $1"
    echo -n "I am pid: "
    red "$$"
    PIDS=$( pidof -x -o $$ $1 )
    PIDS=$(pidof sh $1)  # Process IDs of the various instances of this script.
    #kill $PIDS
    P_array=( $PIDS )    # Put them in an array (why?).
    echo "$PIDS"           # Show process IDs of parent and child processes.
    let "instances = ${#P_array[*]} - 1"  # Count elements, less 1.
    # Why subtract 1?
    echo "$instances instance(s) of this script running."


    if [ $instances -gt 2 ];then
        #exiting
        red 'u may like to kill some..'
        echo 'too many instances are running' | flite
        #exiting
        #suspension

        #exit 1
    fi

}
random_line(){
    file=$1
    local str=`cat $file | sort --random-sort | head -n 1`
    echo "$str"
}
random_quote1(){
    file="$1"
    max=`cat -b $file | wc -l`
    random1 $max
    num=$?
    str=`cat $file | head -$num | tail -1`
    echo5 "$str" 

}

lower() { echo ${@,,}; }

higher() { echo ${@^^}; }

split1(){
    echo '' > /tmp/glossary.txt
    echo2 'split()'
    local file=$1
    #cat $file
    old_IFS=$IFS
    IFS=$' · '
    lines=($(cat $file)) # array
    IFS=$old_IFS
    #register signals
    for line in "${lines[@]}"
    do
        if [ "$line" != '' ]
        then
            echo  "$line" >> /tmp/glossary.txt
        fi
    done
    cat  /tmp/glossary.txt 
    ls -l $file
}

eacher(){
    #echo2  "eacher() got: 1: $1     2: $2"

    local command="$1"
    local question="$2"
    local waiting="$3"

    local title="$4"
    local result=0
    if [ "$EMPATHIC" = true ];then
        #answer=
        $(messageYN1 "$question" "$title")
        answer=$?
        #yellow "$answer"
        if [[ $answer -eq 1 ]];then
            #echo 'exec command'
            eval "$command" 
            if [ "$waiting" != '' ];then
                sleep1 "$waiting"
            fi
            result=1
        fi
    fi
    return "$result"
}



xterm1(){
    trace "DEBUG : $DEBUG"
    trace "xterm1() got: 1:$1 2:$2 3:$3 4:$4"
    local prog="/usr/bin/xterm"

    local cmd="$1"
    #`echo $1`
    local msg="$2"
    #`echo $2`

    local arg3="$3"
    local arg4="$4"
    local func='gxmessage'
    local run1="$func hi"
    if [ "$DEBUG" = false ];then
        (  exec $prog -e $cmd "$msg" "$arg3" "$arg4" &)
        #'echo hi;sleep1 1;echo "$cmd $msg";sleep1 5'
    else
        $cmd "$msg" "$arg3" "$arg4"
    fi
}

debug(){

    if [ "$VERBOSE" = true ];then
        cmd=$1
        msg="$2"
        #eval '$cmd "$msg"'
        #trace 'debug: '
        trace "debug: $1 $2"
    fi

    #http://www.cyberciti.biz/linux-search.php?q=eval
}
update_file(){
    echo "update_file got: file: $1 | msg: $2 | $3"
    local file="$1"
    local msg="$2"

    cat $file > /tmp/1.txt 
    echo "$msg" > $file
    cat /tmp/1.txt >> $file
}
reminder(){
    echo "$REMIND" | flite
}

knowledge(){
    xdg-open http://www.catb.org/~esr/writings/taoup/html/index.html
    xdg-open http://bash.cyberciti.biz/guide/Main_Page}

}
export -f eacher 
#export -f split1
#export -f random_quote1
#export -f log1 

gedit(){
    `exec gedit $1` & 
}
flite(){
    trace "flite() got: 1:$1 2:$2"
    local must="$2"
    sleep1 1

    if [  "$must" = 'true' ] || [ "$SILENCE" = false ];then
        local cmd=/usr/bin/flite
        local desc="$1"
        notify-send "say:" "$desc"
        ( echo "$desc" | $cmd &)
        #gxmessage "flite: $desc" $GXMESSAGET
    else
        echo 'flite is muted'
    fi


}
messageFYN1() {

    local title="$1"
    local file="$2"
    #local result=

    result=$( gxmessage  -buttons "No":0,"Yes":1       -title "$title" -file $file $GXMESSAGET )
    echo "$?"
    return "$?"
}


messageYN() {
    error_handler
    flite 'funcion not found'
    exiting
}

messageYN1() {

    echo2 "messageYN got: 1: $1 2: $2"
    local str="$1"
    local title=${2:-'y/n question'}   # Defaults to /tmp dir.
    local result=0
    #local msg
    #echo "title: $title"
    #exiting
    if [ "$GUI" = 'true' ];then
        $( gxmessage -buttons 'back:0,Next!:1' -title "$title" "$str"  $GXMESSAGET )
        #result=`echo $?`


        result="$?"

        #echo  "$result" 
        #echo "result is: $result"
    else

        #echo "a error message" >&2
        echo  "$title: $str" >&2
        read result
        if [ "$result" = 'y' ];then
            let "result = 1"
        else
            let "result = 0"
        fi
    fi
    return "$result"
}


messageYNF1() {

    local title="y/n question"
    local file="$1"
    local result=0

    if [ "$GUI" = 'true' ];then
        gxmessage -buttons "No":1,"Yes":2          -title "$title" -file "$file"  $GXMESSAGET 
        result=`echo $?`
        #echo "result is: $result"
    else

        #echo "a error message" >&2
        echo  "$title: $str" >&2
        read result
        if [ "$result" = 'y' ];then
            result=2
            let "result = 2"
        else
            let "result = 1"
        fi
    fi
    return $result
}



string_to_buttons_file(){
    trace "string_to_buttons()  got: 1:$1 2: $2 3:$3 4:$4"
    local str="$1"
    local title="$2"
    local file_msg="$3" 
    local delimeter="$4"

    local str1=''
    if [ "$delimeter" = '' ];then
        trace 'no delimeter found'
        delimeter=' '  
    fi

    #delimeter=${1:-60}   # Defaults to /tmp dir.

    old_IFS=$IFS
    IFS="$delimeter"
    #echo  "ifs: $IFS" >&2
    #cat $file


    read -a array <<< "$str"
    for i in "${!array[@]}"; do
        if [ "$str1" = '' ];then
            str1="${array[$i]}:$i"
        else
            str1="$str1,${array[$i]}:$i"
        fi
    done

    IFS=$old_IFS

    gxmessage $(echo $GXMESSAGET) -title "$title" -buttons "$str1"  -file $file_msg $ICONIC
    choose="$?"

    local str2="${array[$choose]}"
    echo "$str2"

    return $choose
}


spell2(){
    local str="$1"
    local res=`echo "$str" |  aspell -a | grep  ','`
    if [  "$res" = '' ];then
        echo "$str"
    else
    notify-send 'spelling-error:' "$res"
        trace "$res"
        echo "error"
    fi
}

string_to_buttons(){
    trace "string_to_buttons()  got: 1:$1 2: $2 3:$3 4:$4"
    local str="$1"
    local title="$2"
    local msg="$3" 
    local delimeter="$4"

    local str1=''
    if [ "$delimeter" = '' ];then
        delimeter=' '  
        trace 'no delimeter found'
    fi

    #delimeter=${1:-60}   # Defaults to /tmp dir.

    old_IFS=$IFS
    IFS="$delimeter"
    #echo  "ifs: $IFS" >&2
    #cat $file


    read -a array <<< "$str"
    for i in "${!array[@]}"; do
        if [ "$str1" = '' ];then
            str1="${array[$i]}:$i"
        else
            str1="$str1,${array[$i]}:$i"
        fi
    done

    IFS=$old_IFS

    gxmessage $GXMESSAGET -title "$title" -buttons "$str1"  "$msg"
    choose=$?

    local str2="${array[$choose]}"
    trace "str2: $str2"

    trace "choose: $choose"
    echo "$str2"

    #return $choose
}

do_mini(){
    trace "do_mini() got: $1"
    local route="$1"
    echo $route

    local msg=`cat $file_data | shyaml get-values routes.$route.steps`
    gxmessage "$msg" $GXMESSAGET
}

do_exit(){
    echo 'do_exit'
}
do_action(){
    route="$1"

    local link=`cat $file_data | shyaml get-values routes.$route.url`
    exo-open $link
}

do_edit(){
    gedit $CFG_DIR/blank.yaml
}


do_update(){

    $tasks_sh show_file $CFG_DIR/blank.yaml
    #gedit $CFG_DIR/blank.yaml
}

do_done(){
    #gedit 
    $tasks_sh show_file $CFG_DIR/blank.yaml
}


do_again(){
trace ''
}

do_breath(){
    flite 'take a breath my love' 

    local should=`cat $CFG_DIR/blank.yaml | shyaml get-value frame.url`
    echo0 "$should"
}

do_commitment(){
    trace "do_commitment() got $1"
    $tasks_sh reminder
}
do_next(){
    trace 'do_next'
}
do_breath(){
    echo 'do_breath'

    $tasks_sh recent breath 
}
do_suspend(){
    echo 'do_suspend'

    $tasks_sh suspend1 
}

tracex(){
    local title="$2"
    local msg="$1"
    gxmessage $GXMESSAGET "$msg" -title "$title"
}

remove_trailing(){
    trace 'remove_trailing'
    local str=`echo "$1" | sed -e 's/^ *//g' -e 's/ *$//g'`
    tracex "$str"
    echo "$str"


    #http://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-bash-variable
}


export -f trace
export -f remove_trailing
export -f tracex
#export -f do_mini 
#export -f get_array 
#export -f array_to_buttons
export -f string_to_buttons
#export -f scrap_something
export -f messageYN1
export -f messageFYN1
export -f edit_stuff

export -f update_file 
export -f reminder 
export -f debug
export -f help1 
export -f echo3 
export -f echo2 
export -f exiting
export -f sleep1
export -f green
export -f red 
export -f blue
export -f yellow
export -f Backtrace1
export -f is_valid 
export -f spell1 
export -f pids3 


export -f pids1 

export -f gedit 
export -f xterm1

export dir_txt=/TORRENTS/txt
export dir_mp3=/TORRENTS/mp3

if [ "$INSTALL" = true ];then
    mkdir -p $dir_mp3
    mkdir -p $dir_txt
fi





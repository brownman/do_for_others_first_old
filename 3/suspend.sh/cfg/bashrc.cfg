#!/bin/bash
#should be portable
#should setup debian after installation
# 1.bash
# 2.vim
# 3.cron suspend
# 4.install package: m.t.s.2
# 5.now you should have a working machine, timer, cron
assert(){
    echo "${@}"
    exiting
}
line(){
    type=$1
    subject=$2
    shift
    shift
    args="$@"
    file=$dir_root/$type/$subject.$type
    if [ ! -f $file ];then
        touch  $file
    fi
    if [ "$args" != '' ];then
        echo "$args" >> /tmp/line
        cat /tmp/line
        echo 'commit changes ?'
        read answer
        if [ $answer = 'y' ];then
            cat /tmp/line >>	$file
            print_status 'done'
        else
            print_error 'skipping'
        fi
    else
        #cat $file
        print_status edit ?
        read answer
        if [ "$answer" = y ];then
            eval $editor $file
        fi

    fi

    sleep 1
    echo 'prining:'
    cat $file | grep --color=auto -E "$args"
    cat $file
    #grep --color=auto "$args" file

}
#export GREP_COLOR='1;32'; cat /dev/urandom | hexdump -C | grep --color=auto "ca fe"


hotkeys(){
    #xfce desktop:
    xfconf-query -c xfce4-keyboard-shortcuts -p /commands/default/XF86Display -s 'test'
    xfconf-query -c xfce4-keyboard-shortcuts -l
}
packages(){
    cat $dir_txt/packages.txt
}
bashrcE(){

    vi $dir_cfg/funcs.cfg  
}
exiting(){
    echo 'Exiting...'
    echo exiting | flite
    exit
}
breakpoint1(){
    notify-send 'error' "$?"
    echo error | flite
}

breakpoint(){
    notify-send error.cfg "$?"
    #optional : use of var: msg
    #notify_send1 'breakpoint' 
    local msg=""
    #flite "error - $msg" &
    #echo -n '' >> $file_error
    file_error=/tmp/error
    echo '' > $file_error



    for ((i = 1; i < ${#FUNCNAME[@]}; i++)); do
        local str1="${BASH_SOURCE[$i]}"
        local str2="${BASH_LINENO[$i-1]}"
        local str3="${FUNCNAME[$i]}"

        msg="$msg\n$str1:$str2:$str3" 

    done

    echo -e "$msg">> $file_error
    if [ "$msg" ];then
        local  cmd="gxmessage -file $file_error -title 'breakpoint: $msg'"
        eval "$cmd"
    fi
}
sleep1()
{
    #print_got "sleep1 got: $1"
    local sec=${1:-5}
    for (( c=1; c<=$sec; c++ ))
    do

        echo -n '.'
        echo -n '.'
        sleep 1
    done
    #    sleep ${sec}s
}

reason_of_death(){
    who=$1
    why="$2"
    print_error "Reason Of Death:"
    echo -e "\twho:  $who:"
    echo -e "\twhy:  $why"
    exiting
}

alias udebug='set +x'
alias debug='set -x'

export -f reason_of_death
export -f sleep1
export -f exiting
export -f bashrcE
export -f line
export -f hotkeys
export -f assert
#echo 'bashrc.cfg alive'
#echo "$dir_cfg"
#trap 'breakpoint' ERR

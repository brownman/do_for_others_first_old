print_line(){
    echo '------------------'
    }
print_func(){
echo $FUNCNAME
}
exiting(){
    echo exiting
    exit 1
}
print_file(){
    #print_func
    file=$1
    echo
    echo $file
    echo '-----'
    cat $file
    echo
}
exports(){

    #print_func
    export file_list=$dir_self/list.txt
local max=`cat $file_list | wc -l`
    let "max_tasks=$max"
echo max tasks:  $max_tasks
    #create dirs
    #dir_log=$path/log
    #dir_env=$path/env
    #######################installation#####################
    #create_dir "$dir_log"
    #create_dir "$dir_env"
    ##################################
    #set file names to be used later
    export file_env=/tmp/env${user}
    export file_err=/tmp/err${user}


}

drop_env(){
#print_func

        env > $file_env
#    #print_func
#    if [ -f "$file_env" ];then
#        /usr/bin/env -i $file_env
#    else
#
#
#    fi
}
set_user(){
    #print_func
    if [ "$(id -u)" != "0" ]; then
        user='user'
    else
        user='root'
    fi
#every 10    "notify-send CRONING $user"
}         
set_timing(){
    #print_func
    date1=`date | tr -s ' ' | cut -d' ' -f4 | sed 's/:/_/g'`
    #notify-send "set timing" "$date1"
    time=`echo "$date1" | cut -d':' -f3`
    time_minute=`echo $time | cut -d'_' -f2 `
    echo "[time minute] $time_minute"
#    notify-send "set timing" "$time_minute"
#    xcowsay "$time_minute"
#    echo "time minute: $time_minute"
}
pick_task(){
    #    http://www.cyberciti.biz/faq/bash-for-loop/
   print_func
    echo "minutes: $time_minute"
    
if [ $time_minute -eq 0 ] ;then
proxy print_color 32 "[reset task to 1st] $time_minute is out of index"
    let 'choose=1'
else
    #    notify-send "croning bank:" "$max"
    #echo  "list has [ $max ]  tasks"
    let "i=$max_tasks"
    while [ $i -gt 0 ];do
        cmd="let \"mod1=$time_minute%$i\""
        #echo "$cmd"
        eval  "$cmd"
        #       echo
        #       echo "num is: $num"
        if [ $mod1 -eq 0  ];then
            let            "choose=$max_tasks-$i"
            break
        fi
        let 'i-=1'
    done
fi

#return $choose
}

run(){
    set -o nounset
    #print_func

    #task_index=$(set_timing)
    if [ $choose -eq 0  ];then
        set_timing 
        #1>/dev/null
        pick_task
        #let "choose=$?"
    else
        echo "task index: $choose"
    fi
#assert not_zero $choose
    print_color 33  "[TASK CHOSEN] $choose"
run2 $choose
    #    print_file $file_out
    #    print_file $file_err
}
reset_log(){
    #print_func
    [ -f /tmp/proxy  ] && { cat -n /tmp/proxy; proxy rm /tmp/proxy; }
}
wrap_runner(){
    #print_func
    cmd=run

    eval "$cmd" 2>$file_err 
    #1>$file_out

    str_time=`ls -l $dir_log/err |  tr -s ' ' | cut -d' ' -f8`
    echo $str_time
    #    cmd="gxmessage -file $file_err -title \"croning error: $str_time\""
    echo "$cmd"

    [ -s $file_err ] && cat $file_err
    #   [ -s $file_err  ] && eval "$cmd"
}

print_file1(){
    #print_func
    file=$1
    echo $file
    echo '----'
    cat $file
}
show_last_error(){

    #print_func
    file=$dir_log/err
    if [ -s "$file" ];then
        gxmessage -file "$file" -title 'cron has errors!'
        echo contine
    else
        echo '[status] file errors is empty'
    fi
}
say(){
    str="$1"
    /usr/games/xcowsay "$num : $str"
    flite -t "$str"
   # /usr/bin/notify-send "$num : $str"
}
run2(){
    print_func
    num=$1
    line=`cat $file_list | head -$num | tail -1`
    #notify-send "croning: $num" "$line"
    desc=`echo "$line" | cut -d'|' -f1`
    cmd=`echo "$line" | cut -d'|' -f2 | tr -s ' '`
    #    str=`echo "$line" | sed 's/ /_/g'`
    #res=$(    gxmessage -entrytext "$line" -title croning )
    #notify-send "$desc"
print_line
   print_color 36 " [ desc ] $desc"
   print_color 35 " [ cmd ] $cmd"
   
eat2
print_line
    
}
eat2(){
say "$desc"
    eval "$cmd"
}
steps2(){
    cmd1="gvim $file_list +${num}"
    update_clipboard "$cmd1"
    run2

}




#depend_package: xsel
echo -e " \t\t\t[LOADER] "
export GUI=true


#####################file know its name:
#file_this=$dir_root/loader.cfg
#######################################
################## clean the log file:
export file_log=$dir_root/log.txt
export file_trace=$dir_root/trace.txt
export file_clip=$dir_root/clipboard.txt
source $dir_root/share/color.cfg
##################
details(){
    echo -e [$str_ptrn] "File:\t\t$file_cfg"
    echo -e [$str_ptrn] "Function:\t\t$func_name"
    echo -e [$str_ptrn] "Test:\t\t$str_res"

    str_goto=`grep $func_name $file_cfg -n | cut -d ':' -f1 `
    print_line

    local cmd="vi $file_cfg +$str_goto"
    echo -e "[$str_ptrn]" "Clipboard:\t\t$cmd"
    cmd="echo $cmd | /usr/bin/xsel --clipboard"
    echo "$cmd" > $file_clip
}
coverage(){
    local str_ptrn="$1"
    str_res=`cat $file_cfg | grep $func_name -A 3 | grep $str_ptrn |  sed "s/#$str_ptrn://g"`
    if [ "$str_res" ];then
        if [ "$str_ptrn" = check ];then
            #we are interested only if there is an error case

            print_color 33 [CHECK]
            details 1>$file_trace
            eval "$str_res" 1>/dev/null 
        elif [ "$str_ptrn" = info ];then
            print_color_n 32 '[INFO]'
            echo -e "\t\t$str_res"
        else
            reason_of_death "[TAG] is not recognized - please add an handler for it before continue" "$str_ptrn"
        fi
    else
        echo [UNCOVERED:]
        details 1>$file_trace
        reason_of_death "Empty tag: $str_ptrn" "$func_name" 
    fi

}

steps(){
    #info: run all steps: use the level values to determine the amount of allowed steps
    prefix="$1"
    str=`cat $dir_root/level${prefix}.txt` 
    file_cfg=$dir_root/steps${prefix}.cfg
    source $file_cfg
    if [ "$str" != '' ];then
        let "max=$str"
        echo -e "\t\t\t\t[LEVELS MAX] $max"

        START=0
        END=$max
        ## save $START, just in case if we need it later ##
        level=$START
        while [[ $level -lt $END ]]
        do

            func_name="step${prefix}${level}"

           print_color_n 36 "[EVALUATING]"
            echo -e "\t\t$level/$max" 
          #"$file_cfg" "$func_name"

            coverage info 
            step${prefix}${level}
            coverage check 

            ((level = level + 1))
        done
    else
        '[error] loading level.txt file'
    fi
}
steps 00
steps 10
print_color_n 32 '[END]' 
echo 'loader.cfg'
